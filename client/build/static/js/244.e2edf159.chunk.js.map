{"version":3,"file":"static/js/244.e2edf159.chunk.js","mappings":"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","sources":["components/Modals/StartModal.jsx","components/StepsScroller.jsx","components/LevelComponents/Block.jsx","pages/Users/Levels/LevelOne.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Animated } from \"react-animated-css\";\r\nconst StartModal = (props) => {\r\n  // get values from props\r\n  const { handleStart, title, body, lowerLimit, upperLimit, boxCount } = props;\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <Animated\r\n        animationIn=\"bounceInUp\"\r\n        animationOut=\"bounceOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"modal-container\">\r\n          <div className=\"modal-title\">\r\n            <h2 className=\"title is-2 has-text-primary\">\r\n              Welcome to Level {title}\r\n            </h2>\r\n          </div>\r\n          <div className=\"modal-body \">\r\n            <div>\r\n              <strong className=\"has-text-primary\">Level Description:</strong>\r\n              <span className=\"has-text-light mt-3 ml-5\">\r\n                <ul>\r\n                  <li>\r\n                    A set of{\" \"}\r\n                    <span className=\"has-text-primary\">{boxCount}</span> numbers\r\n                    are randomly generated out of the range (\r\n                    <span className=\"has-text-primary\">{lowerLimit}</span> -{\" \"}\r\n                    <span className=\"has-text-primary\">{upperLimit}</span>)\r\n                  </li>\r\n                  {body}\r\n                </ul>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <p className=\"tag is-danger is-align-self-center hvr-buzz\">\r\n            Note: A timer will start when you press Start !\r\n          </p>\r\n          <div className=\"modal-footer\">\r\n            <Link to=\"/ms/select\">\r\n              <button className=\"modal-btn button is-primary hvr-sweep-to-left\">\r\n                Select Another Level\r\n              </button>\r\n            </Link>\r\n            <button\r\n              className=\"modal-btn button is-primary hvr-pulse hvr-sweep-to-right\"\r\n              onClick={handleStart}\r\n            >\r\n              Begin Now!\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartModal;\r\n","import React from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\n// component for showing steps\r\nconst StepsScroller = (props) => {\r\n  const {\r\n    lineOne,\r\n    lineTwo,\r\n    lineThree,\r\n    handleReset,\r\n    handleNextStep,\r\n    handlePrevStep,\r\n    enablePrev,\r\n    enableReset,\r\n    enableNext,\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"steps-wrapper\">\r\n        {lineOne ? (\r\n          <div className=\"steps-header has-text-primary\">Steps:</div>\r\n        ) : (\r\n          <span></span>\r\n        )}\r\n\r\n        <div className=\"steps-list\">\r\n          {lineOne ? <li className=\"step1\">{lineOne}</li> : <span></span>}\r\n          {lineTwo ? <li className=\"step2\">{lineTwo}</li> : <span></span>}\r\n          {lineThree ? <li className=\"step3\">{lineThree}</li> : <span></span>}\r\n        </div>\r\n      </div>\r\n      {/* buttons */}\r\n      <Animated\r\n        animationIn=\"bounceInDown\"\r\n        animationOut=\"bounceOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"control-btns field has-addons\">\r\n          <div className=\"control\">\r\n            {enablePrev ? (\r\n              <button\r\n                className=\"button is-primary is-large p-5 is-outlined\"\r\n                onClick={handlePrevStep}\r\n              >\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fas fa-angle-left\"></i>\r\n                </span>\r\n                <span>Prev</span>\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"control\">\r\n            {enableReset ? (\r\n              <button\r\n                className=\"button is-primary is-large p-5 is-outlined\"\r\n                onClick={handleReset}\r\n              >\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fa fa-refresh\"></i>\r\n                </span>\r\n                <span>Reset</span>\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"control\">\r\n            {enableNext ? (\r\n              <button\r\n                className=\"button is-primary is-large p-5 is-outlined\"\r\n                onClick={handleNextStep}\r\n              >\r\n                <span>Next</span>\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fas fa-angle-right\"></i>\r\n                </span>\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StepsScroller;\r\n","import React from \"react\";\r\nimport \"../../css/LevelStyles.css\";\r\n\r\nexport default function Block(props) {\r\n  let cN = \"level-block button is-light is-outlined is-focused\";\r\n  if (props.value == null) cN = \"\";\r\n  return (\r\n    <div className={cN} onClick={props.onClick}>\r\n      {props.value}\r\n    </div>\r\n  );\r\n}\r\n","//imports\r\n\r\nimport React from \"react\";\r\nimport LevelHeader from \"components/LevelComponents/LevelHeader\";\r\nimport MergeSort from \"algorithms/mergeSort.mjs\";\r\nimport Block from \"components/LevelComponents/Block\";\r\nimport StepsScroller from \"components/StepsScroller\";\r\nimport StartModal from \"components/Modals/StartModal\";\r\nimport GameoverModal from \"components/Modals/GameoverModal\";\r\nimport EndModal from \"components/Modals/EndModal\";\r\nimport axios from \"utils/axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport \"../../../css/LevelStyles.css\";\r\n\r\nclass LevelOne extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playButton: true,\r\n      step: 0,\r\n      instructions: [],\r\n      boxes: Array(11).fill(null),\r\n      boxIndex: [1, 2, 4, 4, 5, 8, 9, 9, 5, 2, 3, 6, 6, 7, 10, 11, 11, 7, 3, 1],\r\n      order: [],\r\n      // ------ Modal States ----- //\r\n      showModal: true, //enable modal rendering\r\n      showStartModal: true, //show start level modal by default\r\n      showEndModal: false, //dont show endModal by default\r\n      showGameoverModal: false, //dont show gameover Modal by default\r\n\r\n      // ----- Game State ----- //\r\n      level: 1,\r\n      lives: 3,\r\n      time: 0, //total time (ms) that the timer has been running since start/reset\r\n      timerOn: false, //boolean value for if the timer is on\r\n      timerStart: 0, // when the timer was started (or the past projected start time if the timer is resumed)\r\n      lowerLimit: 1,\r\n      upperLimit: 20,\r\n      boxCount: 10,\r\n    };\r\n\r\n    this.generateArray = this.generateArray.bind(this);\r\n    this.handleNextStep = this.handleNextStep.bind(this);\r\n    this.handlePrevStep = this.handlePrevStep.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    this.generateBlocks = this.generateBlocks.bind(this);\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.handleEnd = this.handleEnd.bind(this);\r\n    this.handleGameover = this.handleGameover.bind(this);\r\n    this.stopTimer = this.stopTimer.bind(this);\r\n    this.logGameData = this.logGameData.bind(this);\r\n  }\r\n\r\n  //** Modal Related functions **/\r\n  // execute when start button on the modal is pressed\r\n  handleStart() {\r\n    // generate new array\r\n    this.generateArray();\r\n    // hide start modal\r\n    this.setState({ showModal: false, showStartModal: false });\r\n    // start timer\r\n     this.startTimer();\r\n  }\r\n\r\n  // timer functions\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerOn: true,\r\n      time: this.state.time,\r\n      timerStart: Date.now() - this.state.time,\r\n    });\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        time: Date.now() - this.state.timerStart,\r\n      });\r\n    }, 1);\r\n  };\r\n\r\n  stopTimer = () => {\r\n    this.setState({ timerOn: false });\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  logGameData = () => {\r\n    let id;\r\n    let today = new Date();\r\n    let dd = String(today.getDate()).padStart(2, \"0\");\r\n    let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0\r\n    let yyyy = today.getFullYear();\r\n    today = yyyy + \"-\" + mm + \"-\" + dd;\r\n    axios.get(\"/level1\").then((res) => {\r\n      id = res.data.length + 1\r\n    });\r\n    const logItem = {\r\n      id: id,\r\n      time: this.state.time,\r\n      accuracy: global.auth.getCurrentHealth(),\r\n      username: global.auth.getUser().username,\r\n      complete_date: today,\r\n    }\r\n    axios.post('/level1', logItem).then(res => {\r\n      toast.success('Your data was recorded successfully!')\r\n    })\r\n  };\r\n\r\n  // executes when the level ends\r\n  handleEnd() {\r\n    // end timer\r\n    this.stopTimer();\r\n    // show end modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: true,\r\n      showGameoverModal: false,\r\n    });\r\n\r\n    // save (username, time, remaining lives, completion date as logged data)\r\n    this.logGameData()\r\n  }\r\n\r\n  // executes when player life reaches 0\r\n  handleGameover() {\r\n    // end timer\r\n    // show gameover modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: false,\r\n      showGameoverModal: true,\r\n    });\r\n    // save (username, time, remaining lives, completion date as logged data)\r\n    this.logGameData()\r\n  }\r\n\r\n  // render the appropriate modal based on current game state\r\n  renderModal() {\r\n    const StartModalBody = () => {\r\n      // modal content\r\n      return (\r\n        <div>\r\n          <li>\r\n            The steps of the algorithm would be executed as visual animation\r\n            accompanied with explanation texts\r\n          </li>\r\n          <li>Navigate through the steps using the step player.</li>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    // if `showStartModal` state is true\r\n    if (this.state.showStartModal) {\r\n      return (\r\n        //show level start modal\r\n        <StartModal\r\n          handleStart={this.handleStart}\r\n          title={this.state.level}\r\n          body={<StartModalBody />}\r\n          lowerLimit={this.state.lowerLimit}\r\n          upperLimit={this.state.upperLimit}\r\n          boxCount={this.state.boxCount}\r\n        />\r\n      );\r\n      // if `showEndModal` state is true\r\n    } else if (this.state.showEndModal && !this.state.showGameoverModal) {\r\n      return (\r\n        <EndModal\r\n          title={this.state.level}\r\n          life={this.state.lives}\r\n          time={this.state.time}\r\n          next=\"Level 2\"\r\n        />\r\n      );\r\n    } else if (this.state.showGameoverModal && !this.state.showEndModal) {\r\n      return (\r\n        // show gameover modal\r\n        <GameoverModal title={this.state.level} time={this.state.time} />\r\n      );\r\n    }\r\n  }\r\n\r\n  //creates array at the rendering of the class\r\n  generateArray() {\r\n    let currentOrd = [];\r\n    let currentInstr = [];\r\n    var sorting = new MergeSort(1, 20, 10);\r\n    // console.log(sorting);\r\n    sorting.sort(sorting.getArray(), currentOrd, [], [], currentInstr, false);\r\n    //retrieves array of instructions and order of steps\r\n    this.setState({\r\n      order: currentOrd,\r\n      instructions: currentInstr,\r\n    });\r\n  }\r\n\r\n  //sets order\r\n  setOrder(val) {\r\n    this.setState({ order: val });\r\n  }\r\n\r\n  //reset button handling\r\n  handleReset(e) {\r\n    const box = Array(11).fill(null);\r\n    let step = 0;\r\n    this.setState({\r\n      step: step,\r\n      boxes: box,\r\n      lineOne: null,\r\n      lineTwo: null,\r\n      lineThree: null,\r\n    });\r\n  }\r\n\r\n  //handles next step\r\n  handleNextStep(e) {\r\n    const box = this.state.boxes.slice();\r\n    var step = this.state.step; //block order to retrieve\r\n    const currentBox = this.state.boxIndex[step] - 1;\r\n    box[currentBox] = this.state.order[step];\r\n    // console.log(box);\r\n    step++;\r\n    this.setState({\r\n      boxes: box,\r\n      step: step,\r\n      lineOne: this.state.instructions[step - 1],\r\n      lineTwo: this.state.instructions[step],\r\n      lineThree: this.state.instructions[step + 1],\r\n    });\r\n\r\n    if (step === 21) {\r\n      this.handleEnd(); //end on last step\r\n    }\r\n  }\r\n\r\n  // handle previous step\r\n  handlePrevStep(e) {\r\n    const box = this.state.boxes.slice();\r\n    var step = this.state.step; //block order to retrieve\r\n    if (step === 0) return;\r\n    step--;\r\n    box[step] = null;\r\n\r\n    this.setState({\r\n      boxes: box,\r\n      step: step,\r\n      lineOne: this.state.instructions[step - 1],\r\n      lineTwo: this.state.instructions[step],\r\n      lineThree: this.state.instructions[step + 1],\r\n    });\r\n  }\r\n\r\n  generateBlocks() {\r\n    const order = this.state.order.slice()[0];\r\n    if (order !== undefined) {\r\n      let temp = order.split(\",\");\r\n      temp.map((element) => {\r\n        console.log(element);\r\n        return <Block value={element} />;\r\n      });\r\n    }\r\n  }\r\n\r\n  //rendering block with the state of the box\r\n  renderBlock(i) {\r\n    return <Block value={this.state.boxes[i - 1]} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.showModal ? (\r\n          this.renderModal()\r\n        ) : (\r\n          <div>\r\n            <div className=\"header mb-6\">\r\n              <LevelHeader\r\n                level=\"1\"\r\n                lives={global.auth.getCurrentHealth()}\r\n                startTimer={this.startTimer}\r\n                stopTimer={this.stopTimer}\r\n                handleGameover={this.handleGameover}\r\n              />\r\n            </div>\r\n            {/* {this.generateBlocks()} */}\r\n            <div className=\"initial\">\r\n              <br></br>\r\n              {this.renderBlock(1)}\r\n              <div className=\"split\">\r\n                <div className=\"left\">\r\n                  <br></br>\r\n                  {this.renderBlock(2)}\r\n                  <div className=\"split\">\r\n                    <div className=\"left\">\r\n                      <br></br>\r\n                      {this.renderBlock(4)}\r\n                    </div>\r\n                    <div className=\"right\">\r\n                      <br></br>\r\n                      {this.renderBlock(5)}\r\n\r\n                      <div className=\"split\">\r\n                        <div className=\"left\">\r\n                          <br></br>\r\n                          {this.renderBlock(8)}\r\n                        </div>\r\n                        <div className=\"right\">\r\n                          <br></br>\r\n                          {this.renderBlock(9)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"right\">\r\n                  <br></br>\r\n                  {this.renderBlock(3)}\r\n\r\n                  <div className=\"split\">\r\n                    <div className=\"left\">\r\n                      <br></br>\r\n                      {this.renderBlock(6)}\r\n                    </div>\r\n                    <div className=\"right\">\r\n                      <br></br>\r\n                      {this.renderBlock(7)}\r\n\r\n                      <div className=\"split\">\r\n                        <div className=\"left\">\r\n                          <br></br>\r\n                          {this.renderBlock(10)}\r\n                        </div>\r\n                        <div className=\"right\">\r\n                          <br></br>\r\n                          {this.renderBlock(11)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"alg-steps\">\r\n              <StepsScroller\r\n                lineOne={this.state.lineOne}\r\n                lineTwo={this.state.lineTwo}\r\n                lineThree={this.state.lineThree}\r\n                handleReset={this.handleReset}\r\n                handleNextStep={this.handleNextStep}\r\n                handlePrevStep={this.handlePrevStep}\r\n                enablePrev={true}\r\n                enableReset={true}\r\n                enableNext={true}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LevelOne;\r\n"],"names":["props","handleStart","title","body","lowerLimit","upperLimit","boxCount","className","animationIn","animationOut","isVisible","to","onClick","lineOne","lineTwo","lineThree","handleReset","handleNextStep","handlePrevStep","enablePrev","enableReset","enableNext","Block","cN","value","LevelOne","startTimer","setState","timerOn","time","state","timerStart","Date","now","timer","setInterval","stopTimer","clearInterval","logGameData","id","today","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","axios","then","res","data","length","logItem","accuracy","global","auth","getCurrentHealth","username","getUser","complete_date","toast","playButton","step","instructions","boxes","Array","fill","boxIndex","order","showModal","showStartModal","showEndModal","showGameoverModal","level","lives","generateArray","bind","generateBlocks","handleEnd","handleGameover","this","StartModalBody","StartModal","EndModal","life","next","GameoverModal","currentOrd","currentInstr","sorting","MergeSort","sort","getArray","val","e","box","slice","undefined","split","map","element","console","log","i","renderModal","LevelHeader","renderBlock","StepsScroller","React"],"sourceRoot":""}