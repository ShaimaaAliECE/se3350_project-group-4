{"version":3,"file":"static/js/993.2388c680.chunk.js","mappings":"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","sources":["components/LevelComponents/MergeSortBlock.jsx","components/Modals/StartModal.jsx","pages/Users/Levels/LevelThree.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Animated } from \"react-animated-css\";\r\n//Sounds\r\nimport RightSound from \"assets/audios/RightSound.mp3\";\r\nimport WrongSound from \"assets/audios/WrongSound.mp3\";\r\n\r\nlet notified = false;\r\n\r\nfunction SoundSuccess() {\r\n  new Audio(RightSound).play();\r\n}\r\n\r\nfunction SoundError() {\r\n  new Audio(WrongSound).play();\r\n}\r\n\r\nfunction notifer() {\r\n  if (!notified) {\r\n    if (!sorted) {\r\n      toast.clearWaitingQueue();\r\n      SoundError(); //bad sound\r\n      toast.error(\"INCORRECT\", { autoClose: 500 });\r\n    } else if (sorted) {\r\n      toast.clearWaitingQueue();\r\n      SoundSuccess();\r\n      toast.success(\"CORRECT\", { autoClose: 500 });\r\n    }\r\n    notified = true;\r\n  } else {\r\n    setTimeout(() => {\r\n      notified = false;\r\n    }, 500);\r\n  }\r\n}\r\n\r\n//This will keep track of what step the player is on through out the entire level.\r\nlet step = 0;\r\nlet sorted = true;\r\n\r\nconst Arrays = (props) => {\r\n  //Get array and prep block values and children\r\n  let blockItems = [];\r\n  let children = [];\r\n  let right = \"\";\r\n\r\n  let array = props.array;\r\n\r\n  const [buttonEnabled, setButtonState] = useState(false);\r\n  const [isSplit, setIsSplit] = useState(false);\r\n  const [childArrays, setChildArrays] = useState();\r\n  const [mergedArray, setMergedArray] = useState(array === 1 ? array : []);\r\n  const [isMerging, setIsMerging] = useState(false);\r\n  const [isMerged, setIsMerged] = useState(false);\r\n  const [winner, setWinner] = useState(false);\r\n\r\n  function pushToMerged(value) {\r\n    let outOfOrder = false;\r\n    // console.log(\"pushToMerged\");\r\n    // console.log(\"child arrays\");\r\n    // console.log(childArrays.leftArray);\r\n    // console.log(childArrays.rightArray);\r\n    // console.log(\"merged array\");\r\n    // console.log(mergedArray);\r\n    // console.log(\"cumulative array\");\r\n    // console.log(array);\r\n    // console.log(\"Hello\");\r\n\r\n    let temp = array;\r\n\r\n    temp.sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n\r\n    // for (let x = 0; x < array.length; x++) {\r\n    //   console.log(array[x]);\r\n    // }\r\n\r\n    if (mergedArray.length === 0) {\r\n      for (let x = 0; x < array.length; x++) {\r\n        //iterate through the array\r\n        if (value > parseInt(array[x])) {\r\n          //compares value clicked to array(childarrays + merged)\r\n          console.log(\"L\"); //debugging\r\n          outOfOrder = true;\r\n        }\r\n      }\r\n    } else if (mergedArray.length !== 0) {\r\n      let lastIndex = mergedArray.length - 1;\r\n      if (parseInt(value) === parseInt(temp[lastIndex + 1])) {\r\n        console.log(\"correct\"); //debugging\r\n      } else {\r\n        outOfOrder = true;\r\n      }\r\n      // console.log(mergedArray[mergedArray.length - 1]);\r\n      // if (parseInt(value) < mergedArray[mergedArray.length - 1]) {\r\n      //   console.log(\"no good\"); //debugging\r\n      //   outOfOrder = true;\r\n      // }\r\n    }\r\n\r\n    if (outOfOrder === false) {\r\n      setMergedArray([...mergedArray, value]);\r\n      console.log(\"fuck\");\r\n    }\r\n    // console.log(mergedArray);\r\n    return outOfOrder;\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.nextStep();\r\n  }, [mergedArray]);\r\n\r\n  function handleSplit() {\r\n    console.log(\"handleSplit\");\r\n    notified = false;\r\n    setIsSplit(!isSplit);\r\n    step++;\r\n    const middle = Math.floor(array.length / 2);\r\n    const array_left = array.slice(0, middle);\r\n    const array_right = array.slice(middle, array.length);\r\n    if (array_left.length === 1 && array_right.length > 1) {\r\n      props.nextStep();\r\n    }\r\n    right = array_right;\r\n    setChildArrays({\r\n      leftArray: array_left,\r\n      rightArray: array_right,\r\n    });\r\n\r\n    setIsMerging(true);\r\n    notification();\r\n    correctAnswer();\r\n  }\r\n\r\n  function correctAnswer() {\r\n    if (!notified) {\r\n      toast.clearWaitingQueue();\r\n      toast.success(\"CORRECT !\", {\r\n        autoClose: 300,\r\n        closeButton: false,\r\n        closeOnClick: true,\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n        onOpen: (props) => ShowCorrectReaction(),\r\n      });\r\n      notified = true;\r\n    }\r\n  }\r\n\r\n  function incorrectAnswer() {\r\n    if (!notified) {\r\n      toast.clearWaitingQueue();\r\n      toast.error(\"INCORRECT !\", {\r\n        autoClose: 300,\r\n        closeButton: false,\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n        closeOnClick: true,\r\n        onOpen: (props) => ShowIncorrectReaction(),\r\n      });\r\n      notified = true;\r\n      if (global.auth.getCurrentHealth() > 0) {\r\n        global.auth.decreaseHealth();\r\n      } else {\r\n        props.handleGameover();\r\n      }\r\n    }\r\n  }\r\n\r\n  function selectValue(el) {\r\n    notified = false;\r\n    let value = el.target.getAttribute(\"value\");\r\n    let x = props.pushToMerged(value);\r\n    if (!x) {\r\n      el.target.style.display = \"none\";\r\n      correctAnswer();\r\n    } else if (x) {\r\n      incorrectAnswer();\r\n    }\r\n  }\r\n\r\n  //Called from checkSplitValidity, checks the rest of the arrays to enable Split.\r\n  function evaluateOtherSplit(condition) {\r\n    //Check if the child array on the right is now allowed to be split.\r\n    if (right.toString() === condition) {\r\n      //Set the override for the Split button, this will show the button regardless of the step.\r\n      setButtonState(true);\r\n    } else {\r\n      //If the condition is not met, check if a parent exists, and pass this function through again.\r\n      if (\r\n        array.length !== props.initialSize &&\r\n        props.initialSize !== undefined\r\n      ) {\r\n        if (props.evaluateOtherSplit) props.evaluateOtherSplit(condition);\r\n      }\r\n    }\r\n    //No need to return anything, either the screen is updated by the override, or there is no change required.\r\n  }\r\n\r\n  //Function to make sure user can only split one array at a time\r\n  function checkSplitValidity(array) {\r\n    //Check if the array in question is the next array in the given order.\r\n    if (array.toString().indexOf(props.order[step]) !== -1) {\r\n      return true;\r\n    } else {\r\n      //Check if a parent exists, if so, check if other arrays are next in the order.\r\n      console.log(props.initialSize);\r\n      if (\r\n        array.length !== props.initialSize &&\r\n        props.initialSize !== undefined\r\n      ) {\r\n        if (props.evaluateOtherSplit)\r\n          props.evaluateOtherSplit(props.order[step]);\r\n      }\r\n      //If the next array in order is not found, return false and show no Split buttons.\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function performGameEnd(sorted) {\r\n    if (sorted) {\r\n      //if sorted\r\n      // console.log(\"Winner\");\r\n      toast.success(\"WINNER\");\r\n      props.handleEnd();\r\n      setWinner(!winner);\r\n    } else if (!sorted) {\r\n      // console.log(\"Loser\");\r\n      // console.log(mergedArray);\r\n    }\r\n  }\r\n\r\n  const ShowCorrectReaction = () => {\r\n    new Audio(RightSound).play();\r\n  };\r\n\r\n  const ShowIncorrectReaction = () => {\r\n    new Audio(WrongSound).play();\r\n  };\r\n\r\n  function notification() {\r\n    //merging is done if merged array length = original array length\r\n    if (mergedArray.length === parseInt(props.initialSize)) {\r\n      // console.log(\"merging completed\");\r\n      setIsMerged(isMerged);\r\n      setIsMerging(!isMerging);\r\n      let sorted = true;\r\n      for (let x = 0; x < mergedArray.length - 1; x++) {\r\n        //goes through array\r\n        if (parseInt(mergedArray[x]) > parseInt(mergedArray[x + 1])) {\r\n          //checks if unsorted\r\n          sorted = false;\r\n        }\r\n      }\r\n      console.log(sorted);\r\n      performGameEnd(sorted);\r\n    }\r\n  }\r\n\r\n  if (isMerging) {\r\n    for (let i = 0; i < mergedArray.length; i++) {\r\n      // console.log(\"hello\");\r\n      blockItems.push([\r\n        <button\r\n          className=\"level-block button is-light is-outlined is-focused\"\r\n          onClick={selectValue}\r\n          key={mergedArray[i]}\r\n          value={mergedArray[i]}\r\n        >\r\n          {mergedArray[i]}\r\n        </button>,\r\n      ]);\r\n    }\r\n    notification();\r\n  }\r\n\r\n  if (!isMerging) {\r\n    //add current arrays items into blocked elements\r\n    for (let i = 0; i < array.length; i++) {\r\n      let temp = true;\r\n      if (array.length === 1) temp = false;\r\n      blockItems.push([\r\n        <button\r\n          className=\"level-block button is-light is-outlined is-focused\"\r\n          disabled={temp}\r\n          onClick={selectValue}\r\n          key={array[i]}\r\n          value={array[i]}\r\n        >\r\n          {array[i]}\r\n        </button>,\r\n      ]);\r\n    }\r\n  }\r\n\r\n  if (!isMerged) {\r\n    if (childArrays !== undefined) {\r\n      children = (\r\n        <div className=\"split\">\r\n          <div className=\"left\">\r\n            <Arrays\r\n              array={childArrays.leftArray}\r\n              label=\"Left Array\"\r\n              order={props.order}\r\n              pushToMerged={pushToMerged}\r\n              evaluateOtherSplit={evaluateOtherSplit}\r\n              setButtonState={buttonEnabled}\r\n              nextStep={props.nextStep}\r\n              handleGameover={props.handleGameover}\r\n              initialSize={props.initialSize}\r\n            />\r\n          </div>\r\n          <div className=\"right\">\r\n            <Arrays\r\n              array={childArrays.rightArray}\r\n              label=\"Right Array\"\r\n              order={props.order}\r\n              pushToMerged={pushToMerged}\r\n              evaluateOtherSplit={evaluateOtherSplit}\r\n              parentButton={buttonEnabled}\r\n              nextStep={props.nextStep}\r\n              handleGameover={props.handleGameover}\r\n              initialSize={props.initialSize}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Allows for an override to let the Split button show no matter the evaluation\r\n  function SplitButtonEnabler(array) {\r\n    if (props.parentButton) {\r\n      return true;\r\n    } else {\r\n      return checkSplitValidity(array);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Animated animationIn=\"fadeInDown\" animationOut=\"bounceOut\">\r\n      {/* <div>\r\n        <button onClick={props.handleGameover}>gameover</button>\r\n        <button onClick={props.handleEnd}>end</button>\r\n      </div> */}\r\n      <div className=\"initial\">\r\n        {/* <div>\r\n          <button onClick={handleGameover}>gameover</button>\r\n          <button onClick={handleEnd}>end</button>\r\n        </div> */}\r\n        <div\r\n          // null, shows the Split button, disappear hides the button\r\n          // isSplit checks if the button was pressed\r\n          // array.length > 1 checks if the array being displayed isnt a single number\r\n          // SplitButtonEnabler is a function that checks for the next valid place for the split button,\r\n          //     or if the override is enabled.\r\n          className={`${!isSplit ? null : \"disappear\"} + \r\n          ${array.length > 1 ? null : \"disappear\"} +\r\n          ${SplitButtonEnabler(array) ? null : \"disappear\"}`}\r\n        >\r\n          <div\r\n            className=\"button is-primary is-small is-outlined hvr-grow hvr-bubble-bottom\"\r\n            onClick={handleSplit}\r\n          >\r\n            <span className=\"icon is-small\">\r\n              <i className=\"fa-solid fa-scissors\"></i>\r\n            </span>\r\n            <span className=\"has-text-weight-semibold\">SPLIT</span>\r\n          </div>\r\n        </div>\r\n        <div>{blockItems}</div>\r\n        <br></br>\r\n        <div key={children}>{children}</div>\r\n      </div>\r\n    </Animated>\r\n  );\r\n};\r\n\r\nexport default Arrays;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Animated } from \"react-animated-css\";\r\nconst StartModal = (props) => {\r\n  // get values from props\r\n  const { handleStart, title, body, lowerLimit, upperLimit, boxCount } = props;\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <Animated\r\n        animationIn=\"bounceInUp\"\r\n        animationOut=\"bounceOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"modal-container\">\r\n          <div className=\"modal-title\">\r\n            <h2 className=\"title is-2 has-text-primary\">\r\n              Welcome to Level {title}\r\n            </h2>\r\n          </div>\r\n          <div className=\"modal-body \">\r\n            <div>\r\n              <strong className=\"has-text-primary\">Level Description:</strong>\r\n              <span className=\"has-text-light mt-3 ml-5\">\r\n                <ul>\r\n                  <li>\r\n                    A set of{\" \"}\r\n                    <span className=\"has-text-primary\">{boxCount}</span> numbers\r\n                    are randomly generated out of the range (\r\n                    <span className=\"has-text-primary\">{lowerLimit}</span> -{\" \"}\r\n                    <span className=\"has-text-primary\">{upperLimit}</span>)\r\n                  </li>\r\n                  {body}\r\n                </ul>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <p className=\"tag is-danger is-align-self-center hvr-buzz\">\r\n            Note: A timer will start when you press Start !\r\n          </p>\r\n          <div className=\"modal-footer\">\r\n            <Link to=\"/ms/select\">\r\n              <button className=\"modal-btn button is-primary hvr-sweep-to-left\">\r\n                Select Another Level\r\n              </button>\r\n            </Link>\r\n            <button\r\n              className=\"modal-btn button is-primary hvr-pulse hvr-sweep-to-right\"\r\n              onClick={handleStart}\r\n            >\r\n              Begin Now!\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartModal;\r\n","import React from \"react\";\r\nimport LevelHeader from \"components/LevelComponents/LevelHeader\";\r\nimport MergeSort from \"algorithms/mergeSort.mjs\";\r\nimport \"../../../css/LevelStyles.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Arrays from \"components/LevelComponents/MergeSortBlock\";\r\n// modals\r\nimport StartModal from \"components/Modals/StartModal\";\r\nimport GameoverModal from \"components/Modals/GameoverModal\";\r\nimport EndModal from \"components/Modals/EndModal\";\r\nimport { toast } from \"react-toastify\";\r\nimport axios from \"utils/axios\";\r\n\r\n//LEVEL 3 must have a set of 10 numbers are randomly generated out of the range (1-20)\r\nclass LevelThree extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    global.auth.setCurrentHealth(3);\r\n    this.state = {\r\n      initialArr: [],\r\n      splitting: true,\r\n      step: 0,\r\n      instructions: [],\r\n      // boxes: Array(11).fill(null),\r\n      // boxIndex: [1, 2, 4, 4, 5, 8, 9, 9, 5, 2, 3, 6, 6, 7, 10, 11, 11, 7, 3, 1],\r\n      order: [],\r\n      splitOrder: [],\r\n      win: false,\r\n\r\n      // ------ Modal States ----- //\r\n      showModal: true, //enable modal rendering\r\n      showStartModal: true, //show start level modal by default\r\n      showEndModal: false, //dont show endModal by default\r\n      showGameoverModal: false, //dont show gameover Modal by default\r\n\r\n      // ----- Game State ----- //\r\n      level: 3,\r\n      lives: global.auth.getCurrentHealth(),\r\n      time: 0, //total time (ms) that the timer has been running since start/reset\r\n      timerOn: false, //boolean value for if the timer is on\r\n      timerStart: 0, // when the timer was started (or the past projected start time if the timer is resumed)\r\n      lowerLimit: 1,\r\n      upperLimit: 20,\r\n      boxCount: 10,\r\n    };\r\n    this.generateArray = this.generateArray.bind(this);\r\n    this.handleNextStep = this.handleNextStep.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    this.handleMerge = this.handleMerge.bind(this);\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.handleEnd = this.handleEnd.bind(this);\r\n    this.handleGameover = this.handleGameover.bind(this);\r\n    this.checkCorrect = this.checkCorrect.bind(this);\r\n    this.stopTimer = this.stopTimer.bind(this);\r\n    this.logGameData = this.logGameData.bind(this);\r\n  }\r\n\r\n  //** Modal Related functions **/\r\n  // execute when start on the modal is pressed\r\n  handleStart() {\r\n    // generate new array\r\n    this.generateArray();\r\n    // hide start modal\r\n    this.setState({ showModal: false, showStartModal: false });\r\n    // set current level\r\n    global.auth.setCurrentLevel(\"3\");\r\n    // start timer\r\n    this.startTimer();\r\n  }\r\n\r\n  logGameData = () => {\r\n    let id;\r\n    let today = new Date();\r\n    let dd = String(today.getDate()).padStart(2, \"0\");\r\n    let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0\r\n    let yyyy = today.getFullYear();\r\n    today = yyyy + \"-\" + mm + \"-\" + dd;\r\n    axios.get(\"/level3\").then((res) => {\r\n      id = res.data.length + 1;\r\n    });\r\n    const logItem = {\r\n      id: id,\r\n      time: this.state.time,\r\n      accuracy: global.auth.getCurrentHealth(),\r\n      username: global.auth.getUser().username,\r\n      complete_date: today,\r\n    };\r\n    axios.post(\"/level3\", logItem).then((res) => {\r\n      toast.success(\"Your data was recorded successfully!\");\r\n    });\r\n  };\r\n\r\n  // timer functions\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerOn: true,\r\n      time: this.state.time,\r\n      timerStart: Date.now() - this.state.time,\r\n    });\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        time: Date.now() - this.state.timerStart,\r\n      });\r\n    }, 10);\r\n  };\r\n\r\n  stopTimer = () => {\r\n    this.setState({ timerOn: false });\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  // executes when the level ends\r\n  handleEnd() {\r\n    toast.clearWaitingQueue();\r\n    // end timer\r\n    this.stopTimer();\r\n    // show end modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: true,\r\n      showGameoverModal: false,\r\n    });\r\n    // save (username, time, remaining lives, completion date as logged data)\r\n    this.logGameData()\r\n  }\r\n\r\n  // executes when player life reaches 0\r\n  handleGameover() {\r\n    toast.clearWaitingQueue();\r\n    // end timer\r\n    // end timer\r\n    this.stopTimer();\r\n    // show gameover modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: false,\r\n      showGameoverModal: true,\r\n    });\r\n    // save (username, time, remaining lives, completion date as logged data)\r\n    this.logGameData()\r\n  }\r\n\r\n  // render the appropriate modal based on current game state\r\n  renderModal() {\r\n    const StartModalBody = () => {\r\n      // modal content\r\n      return (\r\n        <div>\r\n          <li>The user is to decide what needs to be done at every step</li>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    const GameoverModalBody = () => {\r\n      return (\r\n        <div>\r\n          <a href=\"/ms/level1\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 1 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n          <a href=\"/ms/level2\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 2 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n        </div>\r\n      );\r\n    };\r\n    // if `showStartModal` state is true\r\n    if (this.state.showStartModal) {\r\n      return (\r\n        //show level start modal\r\n        <StartModal\r\n          handleStart={this.handleStart}\r\n          title={this.state.level}\r\n          body={<StartModalBody />}\r\n          lowerLimit={this.state.lowerLimit}\r\n          upperLimit={this.state.upperLimit}\r\n          boxCount={this.state.boxCount}\r\n        />\r\n      );\r\n      // if `showEndModal` state is true\r\n    } else if (this.state.showEndModal && !this.state.showGameoverModal) {\r\n      return (\r\n        <EndModal\r\n          title={this.state.level}\r\n          life={global.auth.getCurrentHealth()}\r\n          time={this.state.time}\r\n          next=\"Level 4\"\r\n        />\r\n      );\r\n    } else if (this.state.showGameoverModal && !this.state.showEndModal) {\r\n      return (\r\n        // show gameover modal\r\n        <GameoverModal\r\n          title={this.state.level}\r\n          time={this.state.time}\r\n          dropdownItems={<GameoverModalBody />}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  //creates array at the rendering of the class\r\n  generateArray() {\r\n    let currentOrd = [];\r\n    let splitOrd = [];\r\n    // Create array using given algorithm class\r\n    var sorting = new MergeSort(1, 20, 10);\r\n\r\n    sorting.sort(sorting.getArray(), currentOrd, splitOrd, [], [], false);\r\n    //retrieves array of instructions and order of steps\r\n    this.setState({\r\n      initialArr: sorting.getArray(),\r\n      order: currentOrd,\r\n      splitOrder: splitOrd,\r\n    });\r\n  }\r\n\r\n  //sets order\r\n  setOrder(val) {\r\n    this.setState({ order: val });\r\n  }\r\n\r\n  //reset button handling\r\n  handleReset(e) {\r\n    // const box = Array(11).fill(null);\r\n    let step = 0;\r\n    this.setState({\r\n      step: step,\r\n      // boxes: box,\r\n      lineOne: null,\r\n      lineTwo: null,\r\n      lineThree: null,\r\n    });\r\n  }\r\n\r\n  //handles next step\r\n  handleNextStep(e) {\r\n    // const box = this.state.boxes.slice();\r\n    var step = this.state.step; //block order to retrieve\r\n    // const currentBox = this.state.boxIndex[step] - 1;\r\n    // box[currentBox] = this.state.order[step];\r\n\r\n    step++;\r\n    this.setState({\r\n      // boxes: box,\r\n      step: step,\r\n      lineOne: this.state.instructions[step - 1],\r\n      lineTwo: this.state.instructions[step],\r\n      lineThree: this.state.instructions[step + 1],\r\n    });\r\n  }\r\n\r\n  checkCorrect(arr) {}\r\n\r\n  handleMerge() {\r\n    console.log(\"merge\");\r\n  }\r\n\r\n  handleSplit() {\r\n    console.log(\"split\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.showModal ? (\r\n          this.renderModal()\r\n        ) : (\r\n          <div>\r\n            <div className=\"header mb-6\">\r\n              <LevelHeader\r\n                level=\"3\"\r\n                startTimer={this.startTimer}\r\n                stopTimer={this.stopTimer}\r\n                lives={global.auth.getCurrentHealth()}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Arrays\r\n                array={this.state.initialArr}\r\n                label=\"initial\"\r\n                order={this.state.splitOrder}\r\n                nextStep={this.handleNextStep}\r\n                initialSize={this.state.boxCount}\r\n                handleGameover={this.handleGameover}\r\n                handleEnd={this.handleEnd}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(LevelThree);\r\n"],"names":["notified","step","Arrays","props","blockItems","children","right","array","useState","buttonEnabled","setButtonState","isSplit","setIsSplit","childArrays","setChildArrays","mergedArray","setMergedArray","isMerging","setIsMerging","isMerged","setIsMerged","winner","setWinner","pushToMerged","value","outOfOrder","temp","sort","a","b","length","x","parseInt","console","log","lastIndex","correctAnswer","toast","autoClose","closeButton","closeOnClick","position","onOpen","ShowCorrectReaction","selectValue","el","target","getAttribute","ShowIncorrectReaction","global","auth","getCurrentHealth","decreaseHealth","handleGameover","style","display","evaluateOtherSplit","condition","toString","initialSize","undefined","useEffect","nextStep","Audio","RightSound","play","WrongSound","notification","sorted","handleEnd","performGameEnd","i","push","className","onClick","disabled","leftArray","label","order","rightArray","parentButton","animationIn","animationOut","indexOf","checkSplitValidity","SplitButtonEnabler","middle","Math","floor","array_left","slice","array_right","handleStart","title","body","lowerLimit","upperLimit","boxCount","isVisible","to","LevelThree","logGameData","id","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","axios","then","res","data","logItem","time","state","accuracy","username","getUser","complete_date","startTimer","setState","timerOn","timerStart","now","timer","setInterval","stopTimer","clearInterval","setCurrentHealth","initialArr","splitting","instructions","splitOrder","win","showModal","showStartModal","showEndModal","showGameoverModal","level","lives","generateArray","bind","handleNextStep","handleReset","handleMerge","checkCorrect","this","setCurrentLevel","StartModalBody","GameoverModalBody","href","life","next","dropdownItems","currentOrd","splitOrd","sorting","MergeSort","getArray","val","e","lineOne","lineTwo","lineThree","arr","renderModal","React","withRouter"],"sourceRoot":""}