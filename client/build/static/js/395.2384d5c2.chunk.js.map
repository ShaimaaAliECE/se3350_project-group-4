{"version":3,"file":"static/js/395.2384d5c2.chunk.js","mappings":"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","sources":["components/Pause.jsx","components/LevelComponents/LevelHeader.jsx","components/Modals/EndModal.js","components/Modals/GameoverModal.js","components/PopupMenu.jsx","pages/Admin/EditLevelForms/CustomLevelForm.js","pages/Users/Levels/CustomLevel.js","algorithms/abstractAlgorithm.mjs","algorithms/mergeSort.mjs"],"sourcesContent":["import React from \"react\";\r\n\r\nclass Pause extends React.Component {\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"menu-content\">\r\n        {/* header */}\r\n        <header className=\"box has-text-centered has-background-primary\">\r\n          <p className=\"title is-2 \">Paused</p>\r\n        </header>\r\n        {/* buttons */}\r\n        <div className=\"btns\">\r\n          <div className=\"container\">\r\n            <button\r\n              className=\"m-btn button is-primary is-outlined is-rounded is-large\"\r\n              onClick={() => {\r\n                this.props.close();\r\n              }}\r\n            >\r\n              Resume\r\n            </button>\r\n          </div>\r\n          <div className=\"container\">\r\n            <button\r\n              className=\"m-btn button is-primary is-outlined is-rounded is-large\"\r\n              onClick={() => {\r\n                this.props.restart();\r\n              }}\r\n            >\r\n              Restart\r\n            </button>\r\n          </div>\r\n          <div className=\"container\">\r\n            <button\r\n              className=\"m-btn button is-primary is-outlined is-rounded is-large\"\r\n              onClick={() => {\r\n                this.props.close(\"exit\");\r\n              }}\r\n            >\r\n              Exit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pause;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useState} from \"react\";\r\nimport PopupMenu from \"components/PopupMenu\";\r\nimport Pause from \"components/Pause\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\n\r\n// header component for levels\r\nconst LevelHeader = (props) => {\r\n\r\n  // ----- Timer ----- //\r\n  \r\n  // open pause menu\r\n  const toPause = () => {\r\n    PopupMenu.open({\r\n      component: Pause,\r\n      callback: (data) => {\r\n        if (data === \"exit\") {\r\n          props.history.push(\"/ms/select\");\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n\r\n\r\n  // redirect to next level\r\n  const nextLevel = () => {\r\n    if (props.level === \"1\") {\r\n      props.history.push(\"/ms/level2\");\r\n    } else if (props.level === \"2\") {\r\n      props.history.push(\"/ms/level3\");\r\n    } else if (props.level === \"3\") {\r\n      props.history.push(\"/ms/level4\");\r\n    } else if (props.level === \"4\") {\r\n      props.history.push(\"/ms/level5\");\r\n    } else if (props.level === \"5\") {\r\n      props.history.push(\"/ms/custom\");\r\n    } else if (props.level === \"custom\") {\r\n      props.history.push(\"/ms/select\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Animated\r\n      animationIn=\"fadeInDown\"\r\n      animationOut=\"bounceOut\"\r\n      isVisible={true}\r\n    >\r\n      <div className=\"tabs is-centered is-large is-fullwidth has-background-dark\">\r\n        <ul>\r\n          <li className=\"is-active\">\r\n            <a>\r\n              <span className=\"has-text-primary\">LEVEL {props.level} </span>\r\n            </a>\r\n          </li>\r\n          <li className=\"is-active\">\r\n            <a >\r\n              <span className=\"icon is-small\">\r\n                <i className=\"fas fa-clock hvr-buzz\" aria-hidden=\"true\"></i>\r\n              </span>\r\n              <span>00:00:00</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"is-active hvr-rectangle-in\" onClick={toPause}>\r\n            <a>\r\n              <span className=\"icon is-small\">\r\n                <i className=\"fas fa-pause\" aria-hidden=\"true\"></i>\r\n              </span>\r\n              <span>Pause</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"is-active\">\r\n            <a>\r\n              <span className=\"icon is-small\">\r\n                <i\r\n                  className=\"fas fa-heart has-text-danger hvr-pulse\"\r\n                  aria-hidden=\"true\"\r\n                ></i>\r\n              </span>\r\n              <span> : 3</span>\r\n            </a>\r\n          </li>\r\n          <li className=\"is-active\">\r\n            <a className=\"hvr-rectangle-out\">\r\n              <span onClick={nextLevel}>Next Level</span>\r\n              <span className=\"icon is-small\">\r\n                <i className=\"fa-solid fa-chevron-right\" aria-hidden=\"true\"></i>\r\n              </span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </Animated>\r\n  );\r\n};\r\n\r\nexport default withRouter(LevelHeader);\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\nconst EndModal = (props) => {\r\n  // get values from props\r\n  const { title, life, time, next } = props;\r\n\r\n  // navigat eto next level based on props\r\n  const toNextLevel = () => {\r\n    if (props.title === 1) {\r\n      props.history.push(\"/ms/level2\");\r\n    } else if (props.title === 2) {\r\n      props.history.push(\"/ms/level3\");\r\n    } else if (props.title === 3) {\r\n      props.history.push(\"/ms/level4\");\r\n    } else if (props.title === 4) {\r\n      props.history.push(\"/ms/level5\");\r\n    } else if (props.title === 5) {\r\n      props.history.push(\"/ms/custom\");\r\n    } else if (props.title === \"C\") {\r\n      props.history.push(\"/alg\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <Animated\r\n        animationIn=\"zoomInUp\"\r\n        animationOut=\"bounceOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"modal-container\">\r\n          {/* modal title */}\r\n          <div className=\"modal-title hvr-pop\">\r\n            <h2 className=\"title is-2 has-text-primary\">\r\n              <i className=\"fa-solid fa-trophy\"></i> Level {title} Completed!\r\n            </h2>\r\n          </div>\r\n\r\n          {/* modal body */}\r\n          <div className=\"modal-body\">\r\n            <div>\r\n              <figure className=\"image is-2by1\">\r\n                <img\r\n                  src=\"https://c.tenor.com/O5jZtKfuDRoAAAAd/penguinz0-yeah-baby.gif\"\r\n                  alt=\"Congrats\"\r\n                />\r\n              </figure>\r\n\r\n              {/* level statistics */}\r\n              <nav className=\"level\">\r\n                <div className=\"level-item has-text-centered m-4\">\r\n                  <div>\r\n                    <p className=\"heading has-text-danger\">Time Spent:</p>\r\n                    <p className=\"title has-text-danger\">{time}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"level-item has-text-centered m-4\">\r\n                  <div>\r\n                    <p className=\"heading has-text-danger\">Lives Left: </p>\r\n                    <p className=\"title has-text-danger\">{life}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"level-item has-text-centered m-4\">\r\n                  <div>\r\n                    <p className=\"heading has-text-danger\">Up Next:</p>\r\n                    <p className=\"title has-text-danger\">{next}</p>\r\n                  </div>\r\n                </div>\r\n              </nav>\r\n            </div>\r\n          </div>\r\n\r\n          {/* tag / note */}\r\n          <p className=\"tag is-danger is-align-self-center hvr-grow\">\r\n            Note: This Attempt has been logged!\r\n          </p>\r\n\r\n          {/* buttons */}\r\n          <div className=\"modal-footer\">\r\n            <Link to=\"/ms/select\">\r\n              <button className=\"modal-btn button is-primary hvr-sweep-to-left\">\r\n                Select Another Level\r\n              </button>\r\n            </Link>\r\n\r\n            <button\r\n              className=\"modal-btn button is-primary hvr-pulse hvr-sweep-to-right\"\r\n              onClick={toNextLevel}\r\n            >\r\n              Start Next Level\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(EndModal);\r\n","import React from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\nconst GameoverModal = (props) => {\r\n  // get values from props\r\n  const { title, dropdownItems, time } = props;\r\n\r\n  // quit game\r\n  const quitGame = () => {\r\n    window.open(\"about:blank\", \"_self\");\r\n    window.close();\r\n    global.auth.logout();\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <Animated\r\n        animationIn=\"zoomInDown\"\r\n        animationOut=\"bounceOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"modal-container\">\r\n          <div className=\"modal-title\">\r\n            <h2 className=\"title is-2 has-text-danger hvr-buzz\">\r\n              <i className=\"fa-solid fa-skull\"></i> Oof! You Died\r\n            </h2>\r\n          </div>\r\n          <div className=\"modal-body \">\r\n            <div>\r\n              <figure className=\"image is-2by1\">\r\n                <img\r\n                  src=\"https://c.tenor.com/L553YL0qcMEAAAAC/halloween-skeletons.gif\"\r\n                  alt=\"oof\"\r\n                />\r\n              </figure>\r\n              <nav className=\"level\">\r\n              <div className=\"level-item has-text-centered m-4\">\r\n                  <div>\r\n                    <p className=\"heading has-text-danger\">Level Name:</p>\r\n                    <p className=\"title has-text-danger\">{title }</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"level-item has-text-centered m-4\">\r\n                  <div>\r\n                    <p className=\"heading has-text-danger\">Time Spent:</p>\r\n                    <p className=\"title has-text-danger\">{time}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"level-item has-text-centered m-4\">\r\n                  <div>\r\n                    <p className=\"heading has-text-danger\">Lives Left: </p>\r\n                    <p className=\"title has-text-danger\">0</p>\r\n                  </div>\r\n                </div>\r\n                \r\n              </nav>\r\n            </div>\r\n          </div>\r\n          {/* drop up */}\r\n          <div className=\"dropdown is-hoverable is-up is-align-self-center mb-5\">\r\n            <div className=\"dropdown-trigger\">\r\n              <button\r\n                className=\"button is-primary is-outlined is-rounded\"\r\n                aria-haspopup=\"true\"\r\n                aria-controls=\"dropdown-menu\"\r\n              >\r\n                <strong>Stuck? Try playing previous levels again.</strong>\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fas fa-angle-up\" aria-hidden=\"true\"></i>\r\n                </span>\r\n              </button>\r\n            </div>\r\n            <div className=\"dropdown-menu\" id=\"dropdown-menu4\" role=\"menu\">\r\n              <div className=\"dropdown-content\">\r\n                {/* drop down Items */}\r\n\r\n                {dropdownItems}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              className=\"modal-btn button is-danger is-outlined hvr-rectangle-in\"\r\n              onClick={() => {\r\n                quitGame();\r\n              }}\r\n            >\r\n              Quit Game\r\n            </button>\r\n            <button\r\n              className=\"modal-btn button is-danger is-outlined hvr-rectangle-in\"\r\n              onClick={() => {\r\n                window.location.reload(false);\r\n              }}\r\n            >\r\n              Restart\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameoverModal;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\n/**\r\n   * popup menu component : \r\n   * used as a container for pause and gameover menu\r\n    (1)、child component can be rendered within the menu\r\n    (2)、child components can close parent component (cancel button)\r\n    (3)、child component can communicate with other components (i.e. restart current level)\r\n */\r\n\r\nclass PopupMenu extends React.Component {\r\n  //popup window state\r\n  state = {\r\n    active: false, //closed by default\r\n    component: null, //empty (no child component by default)\r\n    callback: () => {},\r\n  };\r\n\r\n  // ----- Popup menu functions ----- //\r\n\r\n  //open popup window method\r\n  open = (\r\n    options = {\r\n      props: {},\r\n      component: null,\r\n      callback: () => {},\r\n    }\r\n  ) => {\r\n    const { props, component, callback } = options;\r\n    //key is always different, meaning that a new 'component' is render every time window opened.\r\n    const window_key = new Date().getTime();\r\n    // convert 'component' into a real child component\r\n    const child_component = React.createElement(component, {\r\n      ...props,\r\n      close: this.close,\r\n      restart: this.restart,\r\n      key: window_key,\r\n    });\r\n    this.setState({\r\n      active: true,\r\n      component: child_component,\r\n      callback: callback,\r\n    });\r\n  };\r\n\r\n  //close popup window method\r\n  close = (data) => {\r\n    this.setState({\r\n      active: false,\r\n    });\r\n    // save data on close\r\n    this.state.callback(data);\r\n  };\r\n\r\n  // ----- Pause Menu functions ----- //\r\n\r\n  // restart the level\r\n  restart = () => {\r\n    window.location.reload(false);\r\n  };\r\n\r\n  render() {\r\n    // toggle between active/inactive using css class\r\n    const _class = {\r\n      true: \"panel-wrapper active\",\r\n      false: \"panel-wrapper\",\r\n    };\r\n\r\n    return (\r\n      <div className={_class[this.state.active]}>\r\n        {/* overlay */}\r\n        <div\r\n          className=\"over-layer\"\r\n          onClick={() => {\r\n            this.close();\r\n          }}\r\n        ></div>\r\n        {/* window*/}\r\n        <div className=\"window\">\r\n          <div className=\"head\">\r\n            {/* close button */}\r\n            <span\r\n              className=\"close\"\r\n              onClick={() => {\r\n                this.close();\r\n              }}\r\n            >\r\n              ×\r\n            </span>\r\n            {/* mounted child component */}\r\n            {this.state.component}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//create an empty div container\r\nconst _div = document.createElement(\"div\");\r\n//render the child component into the popup window component\r\ndocument.body.appendChild(_div);\r\nconst _popup = render(<PopupMenu />, _div);\r\nexport default _popup;\r\n","import React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Edit Level components\r\nclass CustomLevelForm extends React.Component {\r\n  // form state\r\n  state = {\r\n    boxCount: \"\",\r\n    upperRange: \"\",\r\n    lowerRange: \"\",\r\n  };\r\n\r\n  // retrieve info from form\r\n  handleChange = (e) => {\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // handle custom level form submission\r\n  submit = (e) => {\r\n    e.preventDefault();\r\n    const customState = { ...this.state };\r\n    if (\r\n      this.state.boxCount !== \"\" &&\r\n      this.state.upperRange !== \"\" &&\r\n      this.lowerRange !== \"\"\r\n    ) {\r\n      this.props.close(customState);\r\n    } else {\r\n      const message = \"Oops, you forgot to define custom parameters!\";\r\n      toast.error(message);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form-content\">\r\n        {/* header */}\r\n        {/* title */}\r\n        <div className=\"title section has-text-centered\">\r\n          <h2 className=\"subtitle is-3 has-text-light\">Edit</h2>\r\n          <h1 className=\"title is-2 has-text-primary\">Custom Level</h1>\r\n        </div>\r\n        <form onSubmit={this.submit}>\r\n          <div className=\"field mb-5\">\r\n            <div className=\"control\">\r\n              <label className=\"label has-text-left has-text-light\">\r\n                Number of Boxes\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"input\"\r\n                name=\"boxCount\"\r\n                value={this.state.boxCount}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"field mb-5\">\r\n            <div className=\"control\">\r\n              <label className=\"label has-text-left has-text-light\">\r\n                Lower Range\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"input\"\r\n                name=\"lowerRange\"\r\n                value={this.state.lowerRange}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"field mb-5\">\r\n            <div className=\"control\">\r\n              <label className=\"label has-text-left has-text-light\">\r\n                Upper Range\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"input\"\r\n                name=\"upperRange\"\r\n                value={this.state.upperRange}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <br />\r\n          <div className=\"field is-grouped is-grouped-centered\">\r\n            {/* Start Button */}\r\n            <div className=\"control\">\r\n              <button className=\"button is-primary is-medium\">\r\n                <strong>Start Custom Level</strong>\r\n              </button>\r\n            </div>\r\n            {/* Close Button */}\r\n            {/* <div className=\"control\">\r\n              <button\r\n                className=\"button is-medium\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  this.props.close();\r\n                }}\r\n              >\r\n                <strong>Back</strong>\r\n              </button>\r\n            </div> */}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CustomLevelForm;\r\n","import React from \"react\";\r\nimport LevelHeader from \"components/LevelComponents/LevelHeader\";\r\nimport MergeSort from \"algorithms/mergeSort.mjs\";\r\n\r\nimport CustomLevelForm from \"pages/Admin/EditLevelForms/CustomLevelForm\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { Animated } from \"react-animated-css\";\r\n// modals\r\nimport GameoverModal from \"components/Modals/GameoverModal\";\r\nimport EndModal from \"components/Modals/EndModal\";\r\n\r\nclass CustomLevel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      order: [],\r\n      // ------ Modal States ----- //\r\n      showModal: true, //enable modal rendering\r\n      showStartModal: true, //show start level modal by default\r\n      showEndModal: false, //dont show endModal by default\r\n      showGameoverModal: false, //dont show gameover Modal by default\r\n\r\n      // ----- Game State ----- //\r\n      level: \"C\",\r\n      lives: 3,\r\n      time: 0,\r\n      lowerLimit: 1, //must be = 0\r\n      upperLimit: 20, //must be >= 5\r\n      boxCount: 3,\r\n    };\r\n\r\n    // this.generateArray = this.generateArray.bind(this);\r\n    // this.handleNextStep = this.handleNextStep.bind(this);\r\n    // this.handleReset = this.handleReset.bind(this);\r\n    // this.handleMerge = this.handleMerge.bind(this);\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.handleEnd = this.handleEnd.bind(this);\r\n    // this.checkCorrect = this.checkCorrect.bind(this);\r\n    this.handleGameover = this.handleGameover.bind(this);\r\n  }\r\n\r\n  //Mount popup form before level renders\r\n  // componentDidMount() {\r\n  //   PopupMenu.open({\r\n  //     component: CustomLevelForm,\r\n  //     callback: (data) => {\r\n  //       this.setState({\r\n  //         numOfBoxes: data.boxCount,\r\n  //         upperLimit: data.upperRange,\r\n  //         lowerLimit: data.lowerRange,\r\n  //       });\r\n  //     },\r\n  //   });\r\n  // }\r\n\r\n  //** Modal Related functions **/\r\n  // execute when start on the modal is pressed\r\n  handleStart() {\r\n    // generate new array\r\n    // this.generateArray();\r\n    // hide start modal\r\n    this.setState({ showModal: false, showStartModal: false });\r\n    // start timer\r\n  }\r\n\r\n  // executes when the level ends\r\n  handleEnd() {\r\n    // show end modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: true,\r\n      showGameoverModal: false,\r\n    });\r\n  }\r\n\r\n  // executes when player life reaches 0\r\n  handleGameover() {\r\n    // end timer\r\n    // show gameover modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: false,\r\n      showGameoverModal: true,\r\n    });\r\n    // save (username, time, remaining lives, completion date as logged data)\r\n  }\r\n\r\n  // retrieve info from form\r\n  handleChange = (e) => {\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // render the appropriate modal based on current game state\r\n  renderModal() {\r\n    const GameoverModalBody = () => {\r\n      return (\r\n        <div>\r\n          <a href=\"/ms/level1\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 1 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n          <a href=\"/ms/level2\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 2 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n          <a href=\"/ms/level3\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 3 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n          <a href=\"/ms/level4\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 4 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n          <a href=\"/ms/level5\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 5 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n        </div>\r\n      );\r\n    };\r\n    // if `showStartModal` state is true\r\n    if (this.state.showStartModal) {\r\n      return (\r\n        //show level start modal\r\n        <div className=\"modal-overlay\">\r\n          <Animated\r\n            animationIn=\"bounceInUp\"\r\n            animationOut=\"bounceOut\"\r\n            isVisible={true}\r\n          >\r\n            <div className=\"modal-container\">\r\n              <div className=\"modal-title\">\r\n                <h2 className=\"title is-2 has-text-primary\">\r\n                  Welcome to Level C\r\n                </h2>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <div className=\"card custom-instruction hvr-grow-shadow\">\r\n                  <div className=\"card-image\">\r\n                    <figure className=\"image is-16by9\">\r\n                      <img\r\n                        src=\"https://media1.giphy.com/media/Zy7s96dP38MlQe3OjG/giphy.gif\"\r\n                        alt=\"Placeholder\"\r\n                      />\r\n                    </figure>\r\n                  </div>\r\n                  <div className=\"card-content\">\r\n                    <div className=\"label\">\r\n                      Now you get to defined the upper limit, lower limit and\r\n                      size of the generated array{\" \"}\r\n                      <span className=\"has-text-danger hvr-buzz\">yourself</span>.\r\n                      Experiment freely.\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <div className=\"form-content\">\r\n                    <form>\r\n                      <div className=\"field\">\r\n                        <div className=\"control\">\r\n                          <label className=\"label has-text-left has-text-light\">\r\n                            Number of Boxes\r\n                          </label>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"input\"\r\n                            name=\"boxCount\"\r\n                            value={this.state.boxCount}\r\n                            onChange={this.handleChange}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"field\">\r\n                        <div className=\"control\">\r\n                          <label className=\"label has-text-left has-text-light\">\r\n                            Lower Range\r\n                          </label>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"input\"\r\n                            name=\"lowerLimit\"\r\n                            value={this.state.lowerLimit}\r\n                            onChange={this.handleChange}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"field\">\r\n                        <div className=\"control\">\r\n                          <label className=\"label has-text-left has-text-light\">\r\n                            Upper Range\r\n                          </label>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"input\"\r\n                            name=\"upperLimit\"\r\n                            value={this.state.upperLimit}\r\n                            onChange={this.handleChange}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"modal-footer\">\r\n                <Link to=\"/ms/select\">\r\n                  <button className=\"modal-btn button is-primary hvr-sweep-to-left\">\r\n                    Select Another Level\r\n                  </button>\r\n                </Link>\r\n                <button\r\n                  className=\"modal-btn button is-primary hvr-pulse hvr-sweep-to-right\"\r\n                  onClick={this.handleStart}\r\n                >\r\n                  Begin Now!\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </Animated>\r\n        </div>\r\n      );\r\n      // if `showEndModal` state is true\r\n    } else if (this.state.showEndModal && !this.state.showGameoverModal) {\r\n      return (\r\n        <EndModal\r\n          title={this.state.level}\r\n          life={this.state.lives}\r\n          time={this.state.time}\r\n          next=\"N/A\"\r\n        />\r\n      );\r\n    } else if (this.state.showGameoverModal && !this.state.showEndModal) {\r\n      return (\r\n        // show gameover modal\r\n        <GameoverModal\r\n          title={this.state.level}\r\n          time={this.state.time}\r\n          dropdownItems={<GameoverModalBody />}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  startLevel = (event) => {\r\n    //Store data from form\r\n    let min = event.target[2].value;\r\n    let max = event.target[1].value;\r\n    let arraySize = event.target[0].value;\r\n\r\n    //Generate the array to be sorted\r\n    let orderT = [];\r\n    let instructions = [];\r\n\r\n    const sorting = new MergeSort(min / 10, max, arraySize);\r\n    sorting.sort(sorting.getArray(), orderT, instructions, false);\r\n\r\n    //Gather the inputed information and store\r\n    this.setState({\r\n      numOfBoxes: arraySize,\r\n      upperLimit: max,\r\n      lowerLimit: min,\r\n      order: orderT,\r\n    });\r\n\r\n    //Re-render by calling an empty setState\r\n    this.setState();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.showModal ? (\r\n          this.renderModal()\r\n        ) : (\r\n          <div>\r\n            <div>\r\n              <LevelHeader level=\"custom\" />\r\n              {/* !!!!!modal testing */}\r\n              <div className=\"box is-pink\">\r\n                <h2>For Developer Only</h2>\r\n                <button\r\n                  className=\"button is-success is-outlined\"\r\n                  onClick={this.handleEnd}\r\n                >\r\n                  level complete\r\n                </button>\r\n                <button\r\n                  className=\"button is-danger is-outlined\"\r\n                  onClick={this.handleGameover}\r\n                >\r\n                  gameover\r\n                </button>\r\n              </div>\r\n              {/* !!!!!modal testing */}\r\n              {/* show custom level info */}\r\n              <nav className=\"level has-text-light mt-3\">\r\n                <div className=\"level-item has-text-centered\">\r\n                  <div>\r\n                    <p className=\"heading\">Number of Boxes</p>\r\n                    <p className=\"title has-text-danger\">\r\n                      {this.state.boxCount}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"level-item has-text-centered\">\r\n                  <div>\r\n                    <p className=\"heading\">Lower Limit</p>\r\n                    <p className=\"title has-text-danger\">\r\n                      {this.state.lowerLimit}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"level-item has-text-centered\">\r\n                  <div>\r\n                    <p className=\"heading\">Upper Limit</p>\r\n                    <p className=\"title has-text-danger\">\r\n                      {this.state.upperLimit}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </nav>\r\n              <div className=\"level-wrapper\">\r\n                {/* level */}\r\n\r\n                {this.state.order}\r\n              </div>\r\n              {/* Modal, contains the form to collect information for the custom level */}\r\n              {/* <Modal isOpen={this.state.showModal} ariaHideApp={false}> */}\r\n              {/* Call startLevel on the submission of the form */}\r\n              {/* <form onSubmit={this.startLevel}>\r\n          <label>\r\n            Number Of Boxes:\r\n            <input\r\n              type=\"number\"\r\n              min=\"3\"\r\n              max=\"30\"\r\n              defaultValue={this.state.numOfBoxes}\r\n              name=\"nbox\"\r\n            />\r\n          </label>\r\n          <br></br>\r\n          <br></br>\r\n          <label>\r\n            Upper Limit:\r\n            <input\r\n              type=\"number\"\r\n              max=\"1000\"\r\n              min=\"5\"\r\n              defaultValue={this.state.upperLimit}\r\n              name=\"ulim\"\r\n            />\r\n          </label>\r\n          <br></br>\r\n          <br></br>\r\n          <label>\r\n            Lower Limit:\r\n            <input\r\n              type=\"number\"\r\n              max={this.state.upperLimit}\r\n              min=\"0\"\r\n              defaultValue={this.state.lowerLimit}\r\n              name=\"llim\"\r\n            />\r\n          </label>\r\n          <br></br>\r\n          <br></br>\r\n          <input type=\"Submit\" />\r\n        </form> */}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(CustomLevel);\r\n","export default class Algorithm {\r\n  constructor(min, max, arraySize) {\r\n    //Make sure the constructor is not the Algorithm class.\r\n    if (this.constructor === Algorithm) {\r\n      throw new Error(\"Instantiating an abstract class is a no no.\");\r\n    } else {\r\n      //Use the constructor to generate an array, use the indicated min, max, and size\r\n      let array = [];\r\n\r\n      for (let i = 0; i < arraySize; i++) {\r\n        array.push(Math.floor(Math.random() * (max - min)) + min);\r\n      }\r\n\r\n      this.array = array;\r\n    }\r\n  }\r\n}\r\n\r\n//Create the prototype for sort, every sorting algorithm will sort, so this will be overwritten.\r\nAlgorithm.prototype.sort = function () {\r\n  throw new Error(\"This is an abstract method.... come on bro.\");\r\n};\r\n\r\n//Return the array. This is the array that is to be sorted. This will not be overwritten.\r\nAlgorithm.prototype.getArray = function () {\r\n  return this.array;\r\n};\r\n","import Algorithm from \"./abstractAlgorithm.mjs\";\r\n\r\nclass MergeSort extends Algorithm {}\r\n\r\n//The function that is called\r\nMergeSort.prototype.sort = function (array, order, orderS, instruction, flag) {\r\n  //Determine if array needs to be cut in half\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n\r\n  //Track iteration\r\n  order.push(\"\" + array);\r\n  orderS.push(\"\" + array);\r\n  instruction.push(\"Half this array: [\" + array + \"]\");\r\n\r\n  //Record single digit arrays using a flag\r\n  if (flag) {\r\n    order.push(\"\" + array[0]);\r\n    instruction.push(\"Store the \" + array[0]);\r\n    flag = false;\r\n  }\r\n\r\n  //Half the given array\r\n  const middle = Math.floor(array.length / 2);\r\n\r\n  const array_left = array.slice(0, middle);\r\n  const array_right = array.slice(middle, array.length);\r\n\r\n  if (array_right.length === 3) {\r\n    flag = true;\r\n  }\r\n\r\n  //Send array back to determine if it needs to be halved again\r\n  const sort_left = this.sort(array_left, order, orderS, instruction);\r\n  const sort_right = this.sort(array_right, order, orderS, instruction, flag);\r\n\r\n  //Merge the masses!!!\r\n  return this.merge(sort_left, sort_right, order, instruction);\r\n};\r\n\r\n//To merge arrays backtogether\r\nMergeSort.prototype.merge = function (left, right, order, instruction) {\r\n  let arr = [];\r\n\r\n  const tempL = JSON.parse(JSON.stringify(left));\r\n  const tempR = JSON.parse(JSON.stringify(right));\r\n\r\n  //Add the smaller leading value to the sorted array\r\n  while (left.length && right.length) {\r\n    arr.push(left[0] < right[0] ? left.shift() : right.shift());\r\n  }\r\n\r\n  //Add the rest of the array\r\n  while (left.length) {\r\n    arr.push(left.shift());\r\n  }\r\n\r\n  //Add the rest of the array\r\n  while (right.length) {\r\n    arr.push(right.shift());\r\n  }\r\n\r\n  // console.log(arr);\r\n  //Track iteration\r\n  order.push(\"\" + arr);\r\n  instruction.push(\r\n    \"Combine [\" + tempL + \"] and [\" + tempR + \"] in order to get [\" + arr + \"].\"\r\n  );\r\n\r\n  return arr;\r\n};\r\n\r\n//Template on how to use the above class\r\n\r\n// var sorting = new MergeSort(1, 20, 10);\r\n// let order = [];\r\n// let instruction = [];\r\n// let sorted = sorting.sort(sorting.getArray(), order, instruction, false);\r\n\r\n// console.log(order);\r\n// console.log(instruction);\r\n\r\nexport default MergeSort;\r\n"],"names":["Pause","className","onClick","props","close","restart","React","withRouter","animationIn","animationOut","isVisible","level","PopupMenu","component","callback","data","history","push","title","life","time","next","src","alt","to","dropdownItems","id","role","window","open","global","auth","logout","location","reload","state","active","options","window_key","Date","getTime","child_component","key","setState","true","false","this","_div","document","createElement","body","appendChild","_popup","render","CustomLevel","handleChange","e","value","target","name","startLevel","event","min","max","arraySize","orderT","sorting","MergeSort","sort","getArray","numOfBoxes","upperLimit","lowerLimit","order","showModal","showStartModal","showEndModal","showGameoverModal","lives","boxCount","handleStart","bind","handleEnd","handleGameover","GameoverModalBody","href","type","onChange","EndModal","GameoverModal","renderModal","LevelHeader","Algorithm","constructor","Error","array","i","Math","floor","random","prototype","orderS","instruction","flag","length","middle","array_left","slice","array_right","sort_left","sort_right","merge","left","right","arr","tempL","JSON","parse","stringify","tempR","shift"],"sourceRoot":""}