{"version":3,"file":"static/js/602.b1fe217c.chunk.js","mappings":"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","sources":["pages/Admin/Analytics/AnalyticsToolBar.js","utils/format.js","pages/Admin/Analytics/AnalyticsItem.js","pages/Admin/Analytics/Analytics.js","utils/axios.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\n//Utility bar component\r\nclass AnalyticsToolBar extends React.Component {\r\n  //search bar input state\r\n  state = {\r\n    searchText: \"\",\r\n  };\r\n\r\n  //handles changes to the search bar\r\n  handleChange = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({\r\n      searchText: value,\r\n    });\r\n    this.props.search(value);\r\n  };\r\n\r\n  //empty search bar\r\n  clearSearchText = () => {\r\n    this.setState({\r\n      searchText: \"\",\r\n    });\r\n    this.props.search(\"\");\r\n  };\r\n\r\n  //JFX\r\n  render() {\r\n    return (\r\n      <div className=\"tool-box mb-3\">\r\n        {/* logo */}\r\n        <div className=\"logo-text\">\r\n          <i className=\"fas fa-chart-bar\"></i> Analytics\r\n        </div>\r\n\r\n        {/* search bar */}\r\n        <Animated\r\n          animationIn=\"bounceInDown\"\r\n          animationOut=\"bounce\"\r\n          isVisible={true}\r\n        >\r\n          <div className=\"search-box\">\r\n            <div className=\"field has-addons\">\r\n              <div className=\"control\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input search-input\"\r\n                  placeholder=\"Search for a user by their username..\"\r\n                  value={this.state.searchText}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n              {/* clear button */}\r\n              <div className=\"control\">\r\n                <button\r\n                  className=\"button is-danger\"\r\n                  onClick={this.clearSearchText}\r\n                >\r\n                  <i className=\"fas fa-eraser\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n\r\n        {/* toggle chart */}\r\n        <div>\r\n          <div\r\n            className=\"button is-primary is-outlined hvr-grow \"\r\n            onClick={this.props.handleShowChart}\r\n          >\r\n            {this.props.showChart === true ? (\r\n              <div>\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fa-solid fa-eye\"></i>\r\n                </span>\r\n                <strong>Chart: Visible</strong>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fa-solid fa-eye-slash\"></i>\r\n                </span>\r\n                <strong>Chart: Hidden</strong>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Sort drop down */}\r\n        <div className=\"dropdown is-hoverable \">\r\n          <div className=\"dropdown-trigger\">\r\n            <button\r\n              className=\"button is-outlined is-primary\"\r\n              aria-haspopup=\"true\"\r\n              aria-controls=\"dropdown-menu\"\r\n            >\r\n              <strong>Sort By</strong>\r\n              <span className=\"icon is-small\">\r\n                <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n              </span>\r\n            </button>\r\n          </div>\r\n          <div className=\"dropdown-menu\" id=\"dropdown-menu4\" role=\"menu\">\r\n            <div className=\"dropdown-content\">\r\n              <button\r\n                className=\"dropdown-item button\"\r\n                onClick={this.props.sortName}\r\n              >\r\n                <p className=\"label\">Username ( a {\"-->\"} z )</p>\r\n              </button>\r\n              <button\r\n                className=\"dropdown-item button\"\r\n                onClick={this.props.sortTime}\r\n              >\r\n                <p className=\"label\">Time ( fast {\"-->\"} slow )</p>\r\n              </button>\r\n              <button\r\n                className=\"dropdown-item button\"\r\n                onClick={this.props.sortAccuracy}\r\n              >\r\n                <p className=\"label\">Accuracy ( high {\"-->\"} low )</p>\r\n              </button>\r\n              <button\r\n                className=\"dropdown-item button\"\r\n                onClick={this.props.sortDate}\r\n              >\r\n                <p className=\"label\">Date ( new {\"-->\"} old )</p>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* level select */}\r\n        <Link to=\"/ms/edit\" className=\"quit-box hvr-skew-forward\">\r\n          <span className=\"cart-num\">Back</span>\r\n          <i className=\"fas fa-sign-out-alt\"></i>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnalyticsToolBar;\r\n","//write simple conversion/ formatting functions here\r\n\r\nfunction padTo2Digits(num) {\r\n  return num.toString().padStart(2, \"0\");\r\n}\r\n\r\n// convert milliseconds into 00:00:00 time format\r\nexport const formatTime = (ms) => {\r\n  let seconds = Math.floor(ms / 1000);\r\n  let minutes = Math.floor(seconds / 60);\r\n  let hours = Math.floor(minutes / 60);\r\n\r\n  seconds = seconds % 60;\r\n  minutes = minutes % 60;\r\n\r\n  hours = hours % 24;\r\n\r\n  return `${padTo2Digits(hours)}:${padTo2Digits(minutes)}:${padTo2Digits(\r\n    seconds\r\n  )}`;\r\n};\r\n\r\n// convert remaining lives into accuracy percentage\r\nexport const formatAccuracy = (lifeCount) => {\r\n  if (lifeCount === 0 || lifeCount === \"0\") {\r\n    return 0;\r\n  } else if (lifeCount === 1 || lifeCount === \"1\") {\r\n    return 33;\r\n  } else if (lifeCount === 2 || lifeCount === \"2\") {\r\n    return 66;\r\n  } else if (lifeCount === 3 || lifeCount === \"3\") {\r\n    return 100;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { formatTime, formatAccuracy } from \"utils/format\";\r\n\r\nconst AnalyticsItem = (props) => {\r\n    // deconstruct props\r\n  const { id, time, accuracy, username, complete_date } = props.item || {};\r\n  return (\r\n    <div className=\"columns is-vcentered item-wrapper has-text-centered\">\r\n      <div className=\"column\">\r\n        <span className=\"rank\">{id}</span>\r\n      </div>\r\n\r\n      <div className=\"column a-item-name\">{username}</div>\r\n\r\n      <div className=\"column\">\r\n        <span className=\"a-item-time\">{formatTime(time)}</span>\r\n      </div>\r\n\r\n      <div className=\"column\">\r\n        <span className=\"a-item-time\">{formatAccuracy(accuracy)}%</span>\r\n      </div>\r\n\r\n      <div className=\"column\">\r\n        <span className=\"a-item-date\">{complete_date}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalyticsItem;\r\n","import React, { useState } from \"react\";\r\nimport ToolBar from \"pages/Admin/Analytics/AnalyticsToolBar\";\r\nimport AnalyticsItem from \"pages/Admin/Analytics/AnalyticsItem\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport { toast } from \"react-toastify\";\r\nimport axios from \"utils/axios\";\r\nimport { formatTime, formatAccuracy } from \"utils/format\";\r\n\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nconst Analytics = () => {\r\n  // use state hooks\r\n  const [items, setItems] = useState([]); //default empty object\r\n  const [levelName, setLevelName] = useState(0); //default\r\n  const [timesCompleted, setTimesCompleted] = useState(0);\r\n  const [sourceItems, setSourceItems] = useState([]);\r\n  const [showChart, setShowChart] = useState(false);\r\n\r\n  const ChartArea = () => (\r\n    <Animated animationIn=\"fadeInLeft\" animationOut=\"rubberBand\" isVisible={true}>\r\n      <div className=\"recharts-wrapper\">\r\n        <ResponsiveContainer width=\"50%\" height={250} className=\"hvr-grow\">\r\n          <AreaChart\r\n            data={rechart_data}\r\n            margin={{ top: 20, right: 20, left: 5, bottom: 20 }}\r\n          >\r\n            <defs>\r\n              <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stopColor=\"rgb(64, 223, 159)\"\r\n                  stopOpacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stopColor=\"rgb(64, 223, 159)\"\r\n                  stopOpacity={0}\r\n                />\r\n              </linearGradient>\r\n            </defs>\r\n            <XAxis dataKey=\"username\" />\r\n            <YAxis />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"accuracy\"\r\n              stroke=\"rgb(64, 223, 159)\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorUv)\"\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n\r\n        <ResponsiveContainer width=\"50%\" height={250} className=\"hvr-grow\">\r\n          <AreaChart\r\n            data={rechart_data}\r\n            margin={{ top: 20, right: 5, left: 20, bottom: 20 }}\r\n          >\r\n            <defs>\r\n              <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stopColor=\"rgb(194, 79, 79)\"\r\n                  stopOpacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stopColor=\"rgb(194, 79, 79)\"\r\n                  stopOpacity={0}\r\n                />\r\n              </linearGradient>\r\n            </defs>\r\n            <XAxis dataKey=\"username\" />\r\n            <YAxis />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip />\r\n\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"time\"\r\n              stroke=\"rgb(194, 79, 79)\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorPv)\"\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </Animated>\r\n  );\r\n\r\n  // get the average accuracy of the corresponding level\r\n  const averageAccuracy = () => {\r\n    const average = parseFloat(\r\n      items.map((item) => formatAccuracy(item.accuracy)).reduce((a, value) => a + value, 0) /\r\n        timesCompleted\r\n    ).toFixed(2);\r\n    return average;\r\n  };\r\n\r\n  //  get the fastest record in the response\r\n  const fastestTime = () => {\r\n    let times = items.map((item) => item.time);\r\n    var min = Math.min.apply(null, times);\r\n    return formatTime(min);\r\n  };\r\n\r\n  // search function\r\n  const search = (text) => {\r\n    // get a new array\r\n    let _items = [...sourceItems];\r\n    // filter new array\r\n    _items = _items.filter((item) => {\r\n      const matchArray = item.username.match(new RegExp(text, \"gi\"));\r\n      return !!matchArray;\r\n    });\r\n    // set state of new array\r\n    setItems(_items);\r\n  };\r\n\r\n  // ------ sorting functions ----- //\r\n\r\n  const sortByAccuracy = () => {\r\n    // get a new array\r\n    let _items = [...sourceItems];\r\n    function SortArray(x, y) {\r\n      if (x.accuracy < y.accuracy) {\r\n        return 1;\r\n      }\r\n      if (x.accuracy > y.accuracy) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    }\r\n    _items = _items.sort(SortArray);\r\n    // set state of new array\r\n    setItems(_items);\r\n    toast.success(\"Data is now sorted by accuracy\");\r\n  };\r\n\r\n  const sortByUsername = () => {\r\n    // get a new array\r\n    let _items = [...sourceItems];\r\n    function SortArray(x, y) {\r\n      if (x.username < y.username) {\r\n        return -1;\r\n      }\r\n      if (x.username > y.username) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n    _items = _items.sort(SortArray);\r\n    // set state of new array\r\n    setItems(_items);\r\n    toast.success(\"Data is now sorted by username\");\r\n  };\r\n\r\n  const sortByTime = () => {\r\n    // get a new array\r\n    let _items = [...sourceItems];\r\n    function SortArray(x, y) {\r\n      if (x.time < y.time) {\r\n        return -1;\r\n      }\r\n      if (x.time > y.time) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n    _items = _items.sort(SortArray);\r\n    // set state of new array\r\n    setItems(_items);\r\n    toast.success(\"Data is now sorted by time\");\r\n  };\r\n\r\n  const sortByDate = () => {\r\n    // get a new array\r\n    let _items = [...sourceItems];\r\n    function SortArray(x, y) {\r\n      if (x.complete_date < y.complete_date) {\r\n        return 1;\r\n      }\r\n      if (x.complete_date > y.complete_date) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    }\r\n    _items = _items.sort(SortArray);\r\n    // set state of new array\r\n    setItems(_items);\r\n    toast.success(\"Data is now sorted by date\");\r\n  };\r\n\r\n  // load data into AnalyticItems\r\n  const loadData = (level) => {\r\n    if (level === \"level1\") {\r\n      axios.get(\"/level1\").then((res) => {\r\n        setItems(res.data);\r\n        setSourceItems(res.data);\r\n        setLevelName(1);\r\n        setTimesCompleted(res.data.length);\r\n      });\r\n    } else if (level === \"level2\") {\r\n      axios.get(\"/level2\").then((res) => {\r\n        setItems(res.data);\r\n        setSourceItems(res.data);\r\n        setLevelName(2);\r\n        setTimesCompleted(res.data.length);\r\n      });\r\n    } else if (level === \"level3\") {\r\n      axios.get(\"/level3\").then((res) => {\r\n        setItems(res.data);\r\n        setSourceItems(res.data);\r\n        setLevelName(3);\r\n        setTimesCompleted(res.data.length);\r\n      });\r\n    } else if (level === \"level4\") {\r\n      axios.get(\"/level4\").then((res) => {\r\n        setItems(res.data);\r\n        setSourceItems(res.data);\r\n        setLevelName(4);\r\n        setTimesCompleted(res.data.length);\r\n      });\r\n    } else if (level === \"level5\") {\r\n      axios.get(\"/level5\").then((res) => {\r\n        setItems(res.data);\r\n        setSourceItems(res.data);\r\n        setLevelName(5);\r\n        setTimesCompleted(res.data.length);\r\n      });\r\n    } else if (level === \"custom\") {\r\n      axios.get(\"/custom\").then((res) => {\r\n        setItems(res.data);\r\n        setSourceItems(res.data);\r\n        setLevelName(\"Custom\");\r\n        setTimesCompleted(res.data.length);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleShowChart = () => {\r\n    if (showChart === true) {\r\n      setShowChart(false);\r\n    } else {\r\n      setShowChart(true);\r\n    }\r\n  };\r\n\r\n  // data for rechart visualization tool\r\n  const rechart_data = [...items];\r\n  return (\r\n    <div>\r\n      <ToolBar\r\n        search={search}\r\n        sortTime={sortByTime}\r\n        sortAccuracy={sortByAccuracy}\r\n        sortName={sortByUsername}\r\n        sortDate={sortByDate}\r\n        showChart={showChart}\r\n        handleShowChart={handleShowChart}\r\n      />\r\n      <div className=\"analytics-wrapper\">\r\n        <Animated animationIn=\"flipInX\" animationOut=\"bounce\" isVisible={true}>\r\n          {/* choose which level to show */}\r\n          <div className=\"level-container\">\r\n            {/* each line has 12 slots */}\r\n            <div className=\"columns\">\r\n              <div className=\"column is-2\">\r\n                <div\r\n                  className=\"level-btn button is-primary is-outlined hvr-underline-from-left\"\r\n                  onClick={() => loadData(\"level1\")}\r\n                >\r\n                  Level 1\r\n                </div>\r\n              </div>\r\n              <div className=\"column is-2\">\r\n                <div\r\n                  className=\"level-btn  button is-primary is-outlined hvr-underline-from-left\"\r\n                  onClick={() => loadData(\"level2\")}\r\n                >\r\n                  Level 2\r\n                </div>\r\n              </div>\r\n              <div className=\"column is-2\">\r\n                <div\r\n                  className=\"level-btn button is-primary is-outlined hvr-underline-from-left\"\r\n                  onClick={() => loadData(\"level3\")}\r\n                >\r\n                  Level 3\r\n                </div>\r\n              </div>\r\n              <div className=\"column is-2\">\r\n                <div\r\n                  className=\"level-btn button is-primary is-outlined hvr-underline-from-left\"\r\n                  onClick={() => loadData(\"level4\")}\r\n                >\r\n                  Level 4\r\n                </div>\r\n              </div>\r\n              <div className=\"column is-2\">\r\n                <div\r\n                  className=\"level-btn button is-primary is-outlined hvr-underline-from-left\"\r\n                  onClick={() => loadData(\"level5\")}\r\n                >\r\n                  Level 5\r\n                </div>\r\n              </div>\r\n              <div className=\"column is-2\">\r\n                <div\r\n                  className=\"level-btn  button is-primary is-outlined hvr-underline-from-left\"\r\n                  onClick={() => loadData(\"custom\")}\r\n                >\r\n                  Custom\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Animated>\r\n\r\n        {/* stats level */}\r\n        <nav className=\"level mt-5 has-text-light\">\r\n          <div className=\"level-item has-text-centered\">\r\n            <div className=\"hvr-wobble-horizontal\">\r\n              <p className=\"heading\">Level</p>\r\n              <p className=\"title a-stat \">{levelName}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-item has-text-centered\">\r\n            <div className=\"hvr-wobble-horizontal\">\r\n              <p className=\"heading\">Total Entry</p>\r\n              <p className=\"title a-stat\">{timesCompleted}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-item has-text-centered\">\r\n            <div className=\"hvr-wobble-horizontal\">\r\n              <p className=\"heading\">Fastest Time</p>\r\n              <p className=\"title a-stat\">{fastestTime()}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-item has-text-centered\">\r\n            <div className=\"hvr-wobble-horizontal\">\r\n              <p className=\"heading\">Average Accuracy</p>\r\n              <p className=\"title a-stat\">{averageAccuracy()}%</p>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        {showChart ? <ChartArea /> : null}\r\n\r\n        {/* list*/}\r\n        <Animated\r\n          animationIn=\"fadeInRight\"\r\n          animationOut=\"bounce\"\r\n          isVisible={true}\r\n        >\r\n          <div className=\"items-list mt-4\">\r\n            {/* table header */}\r\n            <div className=\"columns is-vcentered has-text-dark has-background-primary has-text-centered\">\r\n              <div className=\"column\">\r\n                <strong>ID</strong>\r\n              </div>\r\n\r\n              <div className=\"column\">\r\n                <strong>Username</strong>\r\n              </div>\r\n\r\n              <div className=\"column\">\r\n                <strong>HH:MM:SS</strong>\r\n              </div>\r\n\r\n              <div className=\"column\">\r\n                <strong>Accuracy</strong>\r\n              </div>\r\n\r\n              <div className=\"column\">\r\n                <strong>Activity Date</strong>\r\n              </div>\r\n            </div>\r\n\r\n            <TransitionGroup component={null}>\r\n              {items.map((item) => (\r\n                <CSSTransition\r\n                  classNames=\"analytics-fade\"\r\n                  timeout={300}\r\n                  key={item.id}\r\n                >\r\n                  <AnalyticsItem key={item.id} item={item} />\r\n                </CSSTransition>\r\n              ))}\r\n            </TransitionGroup>\r\n          </div>\r\n        </Animated>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Analytics;\r\n","import _axios from \"axios\";\r\n\r\n// change the base url when sending axios requests\r\nconst axios = (baseURL) => {\r\n  const instance = _axios.create({\r\n    baseURL: baseURL || process.env.REACT_APP_API_DOMAIN ||`//${window.location.host}:3001/`,\r\n    timeout: 1500,\r\n  });\r\n\r\n  return instance;\r\n};\r\n\r\nexport { axios };\r\n\r\nexport default axios();\r\n"],"names":["AnalyticsToolBar","state","searchText","handleChange","e","value","target","setState","props","search","clearSearchText","className","animationIn","animationOut","isVisible","type","placeholder","this","onChange","onClick","handleShowChart","showChart","id","role","sortName","sortTime","sortAccuracy","sortDate","to","React","padTo2Digits","num","toString","padStart","formatTime","ms","seconds","Math","floor","minutes","hours","formatAccuracy","lifeCount","item","time","accuracy","username","complete_date","useState","items","setItems","levelName","setLevelName","timesCompleted","setTimesCompleted","sourceItems","setSourceItems","setShowChart","ChartArea","ResponsiveContainer","width","height","AreaChart","data","rechart_data","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Area","stroke","fillOpacity","fill","loadData","level","axios","then","res","length","text","_items","filter","match","RegExp","sort","x","y","toast","times","map","min","apply","fastestTime","parseFloat","reduce","a","toFixed","TransitionGroup","component","CSSTransition","classNames","timeout","baseURL","_axios","process"],"sourceRoot":""}