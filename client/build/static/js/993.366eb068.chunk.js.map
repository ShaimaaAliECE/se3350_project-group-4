{"version":3,"file":"static/js/993.366eb068.chunk.js","mappings":"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","sources":["pages/Users/Levels/LevelThree.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport LevelHeader from \"components/LevelComponents/LevelHeader\";\r\nimport MergeSort from \"algorithms/mergeSort.mjs\";\r\nimport Modal from \"components/Modals/StartModal\";\r\nimport \"../../../css/LevelStyles.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport RightSound from \"assets/audios/RightSound.mp3\";\r\nimport WrongSound from \"assets/audios/WrongSound.mp3\";\r\n// modals\r\nimport StartModal from \"components/Modals/StartModal\";\r\nimport GameoverModal from \"components/Modals/GameoverModal\";\r\nimport EndModal from \"components/Modals/EndModal\";\r\n\r\ntoast.configure();\r\n//LEVEL 3 must have a set of 10 numbers are randomly generated out of the range (1-20)\r\nclass LevelThree extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      initialArr: [],\r\n      splitting: true,\r\n      step: 0,\r\n      instructions: [],\r\n      // boxes: Array(11).fill(null),\r\n      // boxIndex: [1, 2, 4, 4, 5, 8, 9, 9, 5, 2, 3, 6, 6, 7, 10, 11, 11, 7, 3, 1],\r\n      order: [],\r\n      splitOrder: [],\r\n      win: false,\r\n\r\n      // ------ Modal States ----- //\r\n      showModal: true, //enable modal rendering\r\n      showStartModal: true, //show start level modal by default\r\n      showEndModal: false, //dont show endModal by default\r\n      showGameoverModal: false, //dont show gameover Modal by default\r\n\r\n      // ----- Game State ----- //\r\n      level: 3,\r\n      lives: 3,\r\n      time: 0,\r\n      lowerLimit: 1,\r\n      upperLimit: 20,\r\n      boxCount: 10,\r\n    };\r\n    this.generateArray = this.generateArray.bind(this);\r\n    this.handleNextStep = this.handleNextStep.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    this.handleMerge = this.handleMerge.bind(this);\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.handleEnd = this.handleEnd.bind(this);\r\n    this.handleGameover = this.handleGameover.bind(this);\r\n    this.checkCorrect = this.checkCorrect.bind(this);\r\n  }\r\n\r\n  //** Modal Related functions **/\r\n  // execute when start on the modal is pressed\r\n  handleStart() {\r\n    // generate new array\r\n    this.generateArray();\r\n    // hide start modal\r\n    this.setState({ showModal: false, showStartModal: false });\r\n    // start timer\r\n  }\r\n\r\n  // executes when the level ends\r\n  handleEnd() {\r\n    // show end modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: true,\r\n      showGameoverModal: false,\r\n    });\r\n  }\r\n\r\n  // executes when player life reaches 0\r\n  handleGameover() {\r\n    // end timer\r\n    // show gameover modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: false,\r\n      showGameoverModal: true,\r\n    });\r\n    // save (username, time, remaining lives, completion date as logged data)\r\n  }\r\n\r\n  // render the appropriate modal based on current game state\r\n  renderModal() {\r\n    const StartModalBody = () => {\r\n      // modal content\r\n      return (\r\n        <div>\r\n          <li>The user is to decide what needs to be done at every step</li>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    const GameoverModalBody = () => {\r\n      return (\r\n        <div>\r\n          <a href=\"/ms/level1\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 1 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n          <a href=\"/ms/level2\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 2 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n        </div>\r\n      );\r\n    };\r\n    // if `showStartModal` state is true\r\n    if (this.state.showStartModal) {\r\n      return (\r\n        //show level start modal\r\n        <StartModal\r\n          handleStart={this.handleStart}\r\n          title={this.state.level}\r\n          body={<StartModalBody />}\r\n          lowerLimit={this.state.lowerLimit}\r\n          upperLimit={this.state.upperLimit}\r\n          boxCount={this.state.boxCount}\r\n        />\r\n      );\r\n      // if `showEndModal` state is true\r\n    } else if (this.state.showEndModal && !this.state.showGameoverModal) {\r\n      return (\r\n        <EndModal\r\n          title={this.state.level}\r\n          life={this.state.lives}\r\n          time={this.state.time}\r\n          next=\"Level 4\"\r\n        />\r\n      );\r\n    } else if (this.state.showGameoverModal && !this.state.showEndModal) {\r\n      return (\r\n        // show gameover modal\r\n        <GameoverModal\r\n          title={this.state.level}\r\n          time={this.state.time}\r\n          dropdownItems={<GameoverModalBody />}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  //creates array at the rendering of the class\r\n  generateArray() {\r\n    let currentOrd = [];\r\n    let currentInstr = [];\r\n    let splitOrd = [];\r\n    // Create array using given algorithm class\r\n    var sorting = new MergeSort(1, 20, 10);\r\n\r\n    sorting.sort(sorting.getArray(), currentOrd, splitOrd, currentInstr, false);\r\n    //retrieves array of instructions and order of steps\r\n    this.setState({\r\n      initialArr: sorting.getArray(),\r\n      order: currentOrd,\r\n      splitOrder: splitOrd,\r\n      instructions: currentInstr,\r\n    });\r\n  }\r\n\r\n  //sets order\r\n  setOrder(val) {\r\n    this.setState({ order: val });\r\n  }\r\n\r\n  //reset button handling\r\n  handleReset(e) {\r\n    // const box = Array(11).fill(null);\r\n    let step = 0;\r\n    this.setState({\r\n      step: step,\r\n      // boxes: box,\r\n      lineOne: null,\r\n      lineTwo: null,\r\n      lineThree: null,\r\n    });\r\n  }\r\n\r\n  //handles next step\r\n  handleNextStep(e) {\r\n    // const box = this.state.boxes.slice();\r\n    var step = this.state.step; //block order to retrieve\r\n    // const currentBox = this.state.boxIndex[step] - 1;\r\n    // box[currentBox] = this.state.order[step];\r\n\r\n    step++;\r\n    this.setState({\r\n      // boxes: box,\r\n      step: step,\r\n      lineOne: this.state.instructions[step - 1],\r\n      lineTwo: this.state.instructions[step],\r\n      lineThree: this.state.instructions[step + 1],\r\n    });\r\n  }\r\n\r\n  checkCorrect(arr) {}\r\n\r\n  handleMerge() {\r\n    console.log(\"merge\");\r\n  }\r\n\r\n  handleSplit() {\r\n    console.log(\"split\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.showModal ? (\r\n          this.renderModal()\r\n        ) : (\r\n          <div>\r\n            <div className=\"header mb-6\">\r\n              <LevelHeader level=\"3\" />\r\n              {/* !!!!!modal testing */}\r\n              <div className=\"box is-pink\">\r\n                <h2>For Developer Only</h2>\r\n                <button\r\n                  className=\"button is-success is-outlined\"\r\n                  onClick={this.handleEnd}\r\n                >\r\n                  level complete\r\n                </button>\r\n                <button\r\n                  className=\"button is-danger is-outlined\"\r\n                  onClick={this.handleGameover}\r\n                >\r\n                  gameover\r\n                </button>\r\n              </div>\r\n              {/* !!!!!modal testing */}\r\n            </div>\r\n            <div>\r\n              <Arrays\r\n                array={this.state.initialArr}\r\n                label=\"initial\"\r\n                step={0}\r\n                order={this.state.splitOrder}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet step = 0;\r\n\r\nfunction Arrays(props) {\r\n  //Get array and prep block values and children\r\n  let array = props.array;\r\n  let order = props.order;\r\n  let blockItems = [];\r\n  let children = [];\r\n\r\n  //console.log(array.length);\r\n\r\n  const [buttonEnabled, setButtonState] = useState(false);\r\n  const [isSplit, setIsSplit] = useState(false);\r\n  const [childArrays, setChildArrays] = useState();\r\n  const [mergedArray, setMergedArray] = useState(array === 1 ? [...array] : []);\r\n  const [isMerging, setIsMerging] = useState(false);\r\n  const [isMerged, setIsMerged] = useState(false);\r\n  const [winner, setWinner] = useState(false);\r\n  const [right, setRight] = useState();\r\n\r\n  function pushToMerged(value) {\r\n    setMergedArray([...mergedArray, value]);\r\n  }\r\n\r\n  useEffect(() => {}, [array]);\r\n\r\n  function handleSplit() {\r\n    setIsSplit(!isSplit);\r\n    step++;\r\n\r\n    const middle = Math.floor(array.length / 2);\r\n    const array_left = array.slice(0, middle);\r\n    const array_right = array.slice(middle, array.length);\r\n\r\n    setRight(array_right);\r\n\r\n    setChildArrays({\r\n      leftArray: array_left,\r\n      rightArray: array_right,\r\n    });\r\n\r\n    setIsMerging(true);\r\n  }\r\n\r\n  function selectValue(el) {\r\n    let value = el.target.getAttribute(\"value\");\r\n    props.pushToMerge(value);\r\n    el.target.style.display = \"none\";\r\n  }\r\n\r\n  function SoundSuccess() {\r\n    new Audio(RightSound).play();\r\n  }\r\n\r\n  function SoundError() {\r\n    new Audio(WrongSound).play();\r\n  }\r\n\r\n  function evaluateOtherSplit(condition) {\r\n    // console.log(\"Evaluating: \" + right + \" to \" + condition)\r\n\r\n    if (right.toString() === condition) {\r\n      // console.log(\"Found a match: \" + right + \" and \" + condition)\r\n      setButtonState(true);\r\n    } else {\r\n      if (array.length !== 10) {\r\n        props.evaluateOtherSplit(condition);\r\n      } else {\r\n        // console.log(\"Nothing Found\")\r\n      }\r\n    }\r\n  }\r\n\r\n  //Function to make sure user can only split one array at a time\r\n  function checkSplitValidity(array) {\r\n    // console.log(step)\r\n    // console.log(order[step])\r\n    // console.log(array)\r\n    if (array.toString().indexOf(order[step]) !== -1) {\r\n      return true;\r\n    } else {\r\n      if (array.length !== 10) {\r\n        props.evaluateOtherSplit(order[step]);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (isMerging) {\r\n    if (mergedArray != null) {\r\n      let sorted = true;\r\n      for (let x = 0; x < mergedArray.length - 1; x++) {\r\n        //let sorted = true;\r\n        if (parseInt(mergedArray[x]) > parseInt(mergedArray[x + 1])) {\r\n          sorted = false;\r\n          if (!sorted) {\r\n            console.log(\"bad\");\r\n            console.log(mergedArray);\r\n          }\r\n        }\r\n      }\r\n      if (!sorted) {\r\n        console.log(\"bad\");\r\n        SoundError();\r\n        toast.error(\"INCORRECT\");\r\n      }\r\n\r\n      for (let i = 0; i < mergedArray.length; i++) {\r\n        blockItems.push([\r\n          <button onClick={selectValue} value={mergedArray[i]}>\r\n            {mergedArray[i]}\r\n          </button>,\r\n        ]);\r\n      }\r\n    }\r\n    //merging is done if merged array length = original array length\r\n    if (mergedArray.length === 10) {\r\n      console.log(\"merging completed\");\r\n      setIsMerged(isMerged);\r\n      setIsMerging(!isMerging);\r\n      let sorted = true;\r\n      for (let x = 0; x < mergedArray.length - 1; x++) {\r\n        if (parseInt(mergedArray[x]) > parseInt(mergedArray[x + 1])) {\r\n          sorted = false;\r\n          if (!sorted) {\r\n            console.log(\"Loser\");\r\n            console.log(mergedArray);\r\n          }\r\n        }\r\n      }\r\n      if (sorted) {\r\n        console.log(\"Winner\");\r\n        SoundSuccess();\r\n        toast.success(\"WINNER\");\r\n        setWinner(!winner);\r\n      } else if (!sorted) {\r\n        console.log(\"Loser\");\r\n        console.log(mergedArray);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!isMerging) {\r\n    //add current arrays items into blocked elements\r\n    for (let i = 0; i < array.length; i++) {\r\n      let temp = true;\r\n      if (array.length === 1) temp = false;\r\n      blockItems.push([\r\n        <button disabled={temp} onClick={selectValue} value={array[i]}>\r\n          {array[i]}\r\n        </button>,\r\n      ]);\r\n    }\r\n  }\r\n\r\n  if (!isMerged) {\r\n    if (childArrays !== undefined) {\r\n      children = (\r\n        <div className=\"split\">\r\n          <div className=\"left\">\r\n            <Arrays\r\n              array={childArrays.leftArray}\r\n              label=\"Left Array\"\r\n              order={order}\r\n              pushToMerge={pushToMerged}\r\n              evaluateOtherSplit={evaluateOtherSplit}\r\n              setButtonState={buttonEnabled}\r\n            />\r\n          </div>\r\n          <div className=\"right\">\r\n            <Arrays\r\n              array={childArrays.rightArray}\r\n              label=\"Right Array\"\r\n              order={order}\r\n              pushToMerge={pushToMerged}\r\n              evaluateOtherSplit={evaluateOtherSplit}\r\n              parentButton={buttonEnabled}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function SplitButtonEnabler(array) {\r\n    if (props.parentButton) {\r\n      return true;\r\n    } else {\r\n      return checkSplitValidity(array);\r\n    }\r\n  }\r\n\r\n  //${checkSplitValidity(array) ? null : \"disappear\"}`} should go after line '${array.length > 1 ? null : \"disappear\"} +'\r\n  return (\r\n    <div className=\"initial\">\r\n      <div\r\n        className={`${!isSplit ? null : \"disappear\"} + \r\n        ${array.length > 1 ? null : \"disappear\"} +\r\n        ${SplitButtonEnabler(array) ? null : \"disappear\"}`}\r\n      >\r\n        <button onClick={handleSplit}>Split</button>\r\n      </div>\r\n      <div>{blockItems}</div>\r\n      <br></br>\r\n      <div>{children}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(LevelThree);\r\n"],"names":["toast","LevelThree","props","state","initialArr","splitting","step","instructions","order","splitOrder","win","showModal","showStartModal","showEndModal","showGameoverModal","level","lives","time","lowerLimit","upperLimit","boxCount","generateArray","bind","handleNextStep","handleReset","handleMerge","handleStart","handleEnd","handleGameover","checkCorrect","this","setState","StartModalBody","GameoverModalBody","href","className","title","body","life","next","dropdownItems","currentOrd","currentInstr","splitOrd","sorting","MergeSort","sort","getArray","val","e","lineOne","lineTwo","lineThree","arr","console","log","renderModal","onClick","Arrays","array","label","React","blockItems","children","useState","buttonEnabled","setButtonState","isSplit","setIsSplit","childArrays","setChildArrays","mergedArray","setMergedArray","isMerging","setIsMerging","isMerged","setIsMerged","winner","setWinner","right","setRight","pushToMerged","value","selectValue","el","target","getAttribute","pushToMerge","style","display","evaluateOtherSplit","condition","toString","length","useEffect","sorted","x","parseInt","Audio","WrongSound","play","i","push","RightSound","temp","disabled","undefined","leftArray","rightArray","parentButton","indexOf","checkSplitValidity","SplitButtonEnabler","middle","Math","floor","array_left","slice","array_right","withRouter"],"sourceRoot":""}