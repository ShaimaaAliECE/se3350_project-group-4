{"version":3,"file":"static/js/222.4482485e.chunk.js","mappings":"oIAoFA,IAhFsB,SAACA,GACrB,IACEC,EASED,EATFC,QACAC,EAQEF,EARFE,QACAC,EAOEH,EAPFG,UACAC,EAMEJ,EANFI,YACAC,EAKEL,EALFK,eACAC,EAIEN,EAJFM,eACAC,EAGEP,EAHFO,WACAC,EAEER,EAFFQ,YACAC,EACET,EADFS,WAGF,OACE,4BACE,iBAAKC,UAAU,gBAAf,UACGT,GACC,gBAAKS,UAAU,gCAAf,qBAEA,qBAGF,iBAAKA,UAAU,aAAf,UACGT,GAAU,eAAIS,UAAU,QAAd,SAAuBT,KAAgB,oBACjDC,GAAU,eAAIQ,UAAU,QAAd,SAAuBR,KAAgB,oBACjDC,GAAY,eAAIO,UAAU,QAAd,SAAuBP,KAAkB,2BAI1D,SAAC,IAAD,CACEQ,YAAY,eACZC,aAAa,YACbC,WAAW,EAHb,UAKE,iBAAKH,UAAU,gCAAf,WACE,gBAAKA,UAAU,UAAf,SACGH,GACC,oBACEG,UAAU,6CACVI,QAASR,EAFX,WAIE,iBAAMI,UAAU,gBAAhB,UACE,cAAGA,UAAU,yBAEf,sCAEA,QAEN,gBAAKA,UAAU,UAAf,SACGF,GACC,oBACEE,UAAU,6CACVI,QAASV,EAFX,WAIE,iBAAMM,UAAU,gBAAhB,UACE,cAAGA,UAAU,qBAEf,uCAEA,QAEN,gBAAKA,UAAU,UAAf,SACGD,GACC,oBACEC,UAAU,6CACVI,QAAST,EAFX,WAIE,oCACA,iBAAMK,UAAU,gBAAhB,UACE,cAAGA,UAAU,4BAGf,iB,0OC7DhBK,EAAAA,GAAAA,YAAA,IACMC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAYhB,GAAQ,IAAD,yBACjB,cAAMA,IACDiB,MAAQ,CACXC,WAAY,GACZC,WAAW,EACXC,KAAM,EACNC,aAAc,GAGdC,MAAO,GACPC,WAAY,GACZC,KAAK,EAGLC,WAAW,EACXC,gBAAgB,EAChBC,cAAc,EACdC,mBAAmB,EAGnBC,MAAO,EACPC,MAAO,EACPC,KAAM,EACNC,WAAY,EACZC,WAAY,GACZC,SAAU,IAEZ,EAAKC,cAAgB,EAAKA,cAAcC,MAAnB,WACrB,EAAK/B,eAAiB,EAAKA,eAAe+B,MAApB,WACtB,EAAKhC,YAAc,EAAKA,YAAYgC,MAAjB,WACnB,EAAKC,YAAc,EAAKA,YAAYD,MAAjB,WACnB,EAAKE,YAAc,EAAKA,YAAYF,MAAjB,WACnB,EAAKG,UAAY,EAAKA,UAAUH,MAAf,WACjB,EAAKI,eAAiB,EAAKA,eAAeJ,MAApB,WAjCL,EA+OlB,O,mCAzMD,WAEEK,KAAKN,gBAELM,KAAKC,SAAS,CAAEjB,WAAW,EAAOC,gBAAgB,M,uBAKpD,WAEEe,KAAKC,SAAS,CACZjB,WAAW,EACXE,cAAc,EACdC,mBAAmB,M,4BAKvB,WAGEa,KAAKC,SAAS,CACZjB,WAAW,EACXE,cAAc,EACdC,mBAAmB,M,yBAMvB,WACE,IAAMe,EAAiB,WAErB,OACE,4BACE,uJAIA,kFAKAC,EAAoB,WACxB,OACE,0BACE,cAAGC,KAAK,aAAanC,UAAU,gBAA/B,UACE,kBAAMA,UAAU,0BAAhB,4BACgB,cAAGA,UAAU,6BAOrC,OAAI+B,KAAKxB,MAAMS,gBAGX,SAAC,IAAD,CACEY,YAAaG,KAAKH,YAClBQ,MAAOL,KAAKxB,MAAMY,MAClBkB,MAAM,SAACJ,EAAD,IACNX,WAAYS,KAAKxB,MAAMe,WACvBC,WAAYQ,KAAKxB,MAAMgB,WACvBC,SAAUO,KAAKxB,MAAMiB,WAIhBO,KAAKxB,MAAMU,eAAiBc,KAAKxB,MAAMW,mBAE9C,SAAC,IAAD,CACEkB,MAAOL,KAAKxB,MAAMY,MAClBmB,KAAMP,KAAKxB,MAAMa,MACjBC,KAAMU,KAAKxB,MAAMc,KACjBkB,KAAK,YAGAR,KAAKxB,MAAMW,oBAAsBa,KAAKxB,MAAMU,cAGnD,SAAC,IAAD,CACEmB,MAAOL,KAAKxB,MAAMY,MAClBE,KAAMU,KAAKxB,MAAMc,KACjBmB,eAAe,SAACN,EAAD,WANd,I,2BAaT,WACE,IAAIO,EAAa,GACbC,EAAe,GACfC,EAAW,GAEXC,EAAU,IAAIC,EAAAA,EAAU,EAAG,GAAI,IAEnCD,EAAQE,KAAKF,EAAQG,WAAYN,EAAYE,EAAUD,GAAc,GAErEX,KAAKC,SAAS,CACZxB,WAAYoC,EAAQG,WACpBnC,MAAO6B,EACP5B,WAAY8B,EACZhC,aAAc+B,M,sBAKlB,SAASM,GACPjB,KAAKC,SAAS,CAAEpB,MAAOoC,M,yBAIzB,SAAYC,GAGVlB,KAAKC,SAAS,CACZtB,KAFS,EAITnB,QAAS,KACTC,QAAS,KACTC,UAAW,S,4BAKf,SAAewD,GAEb,IAAIvC,EAAOqB,KAAKxB,MAAMG,KAItBA,IACAqB,KAAKC,SAAS,CAEZtB,KAAMA,EACNnB,QAASwC,KAAKxB,MAAMI,aAAaD,EAAO,GACxClB,QAASuC,KAAKxB,MAAMI,aAAaD,GACjCjB,UAAWsC,KAAKxB,MAAMI,aAAaD,EAAO,OAE7C,yBAED,WACEwC,QAAQC,IAAI,WACb,yBAED,WACED,QAAQC,IAAI,WACb,oBAED,WACE,OACE,yBACGpB,KAAKxB,MAAMQ,UACVgB,KAAKqB,eAEL,4BACE,iBAAKpD,UAAU,cAAf,WACE,SAAC,IAAD,CAAamB,MAAM,OAEnB,iBAAKnB,UAAU,cAAf,WACE,gDACA,mBACEA,UAAU,gCACVI,QAAS2B,KAAKF,UAFhB,6BAMA,mBACE7B,UAAU,+BACVI,QAAS2B,KAAKD,eAFhB,6BASJ,0BACE,SAACuB,EAAD,CACEC,MAAOvB,KAAKxB,MAAMC,WAClB+C,MAAM,UACN3C,MAAOmB,KAAKxB,MAAMM,WAClB2C,SAAUzB,KAAKpC,oBAGnB,0BACE,SAAC,IAAD,CACEJ,QAASwC,KAAKxB,MAAMhB,QACpBC,QAASuC,KAAKxB,MAAMf,QACpBC,UAAWsC,KAAKxB,MAAMd,UACtBI,YAAY,EACZC,aAAa,EACbC,YAAY,eAOzB,EAhPGO,CAAiBmD,EAAAA,WAoPnB/C,EAAO,EAEX,SAAS2C,EAAO/D,GAEd,IAAIgE,EAAQhE,EAAMgE,MACd1C,EAAQtB,EAAMsB,MACd8C,EAAa,GACbC,EAAW,GAEf,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAsCJ,EAAAA,EAAAA,YAAtC,eAAOK,EAAP,KAAoBC,EAApB,KACA,GAAsCN,EAAAA,EAAAA,UAAmB,IAAVN,GAAA,OAAkBA,GAAS,IAA1E,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAAkCR,EAAAA,EAAAA,WAAS,GAA3C,eAAOS,EAAP,KAAkBC,EAAlB,KACA,GAAgCV,EAAAA,EAAAA,WAAS,GAAzC,eAAOW,EAAP,KAAiBC,EAAjB,KACA,GAA4BZ,EAAAA,EAAAA,WAAS,GAArC,eAAOa,EAAP,KAAeC,EAAf,KACA,GAA0Bd,EAAAA,EAAAA,YAA1B,eAAOe,EAAP,KAAcC,EAAd,KACA,GAA4BhB,EAAAA,EAAAA,WAAS,GAArC,yBAEA,SAASiB,EAAaC,GACpBV,EAAe,GAAD,eAAKD,GAAL,CAAkBW,KA6BlC,SAASC,EAAYC,GACnB,IAAIF,EAAQE,EAAGC,OAAOC,aAAa,SACnC5F,EAAM6F,YAAYL,GAClBE,EAAGC,OAAOG,MAAMC,QAAU,OAG5B,SAASC,IACP,IAAIC,MAAMC,GAAYC,OAYxB,SAASC,EAAmBC,GAEtBhB,EAAMiB,aAAeD,EAEvB7B,GAAe,GAGM,KAAjBR,EAAMuC,QACRvG,EAAMoG,mBAAmBC,GAqB/B,IA1EAG,EAAAA,EAAAA,YAAU,WACRxG,EAAMkE,aACL,CAACF,EAAMuC,OAAQvC,EAAMuC,QAAU1B,EAAY0B,OAAwB,GAAhBvC,EAAMuC,SAwExDxB,EAAW,CACb,GAAmB,MAAfF,EAAqB,CAcvB,IADA,IAAI4B,GAAS,EACJC,EAAI,EAAGA,EAAI7B,EAAY0B,OAAS,EAAGG,IAEtCC,SAAS9B,EAAY6B,IAAMC,SAAS9B,EAAY6B,EAAI,MAEtDD,GAAS,EACT7C,QAAQC,IAAI,KACZD,QAAQC,IAAIgB,GACZjB,QAAQC,IAAIG,IAIXyC,EAKMA,IAETT,IACAjF,EAAAA,GAAAA,QAAc,aAPd6C,QAAQC,IAAIgB,GACZjB,QAAQC,IAAI,OAjEhB,IAAIoC,MAAMW,GAAYT,OAmElBpF,EAAAA,GAAAA,MAAY,cAMd,IAAK,IAAI8F,GAAI,EAAGA,GAAIhC,EAAY0B,OAAQM,KACtCzC,EAAW0C,KAAK,EACd,mBAAQhG,QAAS2E,EAAaD,MAAOX,EAAYgC,IAAjD,SACGhC,EAAYgC,QAOrB,GAA2B,KAAvBhC,EAAY0B,OAAe,CAC7B3C,QAAQC,IAAI,qBACZqB,EAAYD,GACZD,GAAcD,GAEd,IADA,IAAI0B,IAAS,EACJC,GAAI,EAAGA,GAAI7B,EAAY0B,OAAS,EAAGG,KAEtCC,SAAS9B,EAAY6B,KAAMC,SAAS9B,EAAY6B,GAAI,MAEtDD,IAAS,GAGTA,IAEF7C,QAAQC,IAAI,UACZmC,IACAjF,EAAAA,GAAAA,QAAc,UACdqE,GAAWD,IACDsB,KACV7C,QAAQC,IAAI,SACZD,QAAQC,IAAIgB,KAKlB,IAAKE,EAEH,IAAK,IAAI8B,GAAI,EAAGA,GAAI7C,EAAMuC,OAAQM,KAAK,CACrC,IAAIE,IAAO,EACU,IAAjB/C,EAAMuC,SAAcQ,IAAO,GAC/B3C,EAAW0C,KAAK,EACd,mBAAQE,SAAUD,GAAMjG,QAAS2E,EAAaD,MAAOxB,EAAM6C,IAA3D,SACG7C,EAAM6C,QA8Cf,OAxCK5B,QACiBgC,IAAhBtC,IACFN,GACE,iBAAK3D,UAAU,QAAf,WACE,gBAAKA,UAAU,OAAf,UACE,SAACqD,EAAD,CACEC,MAAOW,EAAYuC,UACnBjD,MAAM,aACN3C,MAAOA,EACPuE,YAAaN,EACba,mBAAoBA,EACpB5B,eAAgBD,EAChBL,SAAUlE,EAAMkE,cAGpB,gBAAKxD,UAAU,QAAf,UACE,SAACqD,EAAD,CACEC,MAAOW,EAAYwC,WACnBlD,MAAM,cACN3C,MAAOA,EACPuE,YAAaN,EACba,mBAAoBA,EACpBgB,aAAc7C,EACdL,SAAUlE,EAAMkE,kBAkB1B,iBAAKxD,UAAU,UAAf,WACE,gBAMEA,UAAS,UAAM+D,EAAiB,YAAP,KAAhB,wBACPT,EAAMuC,OAAS,EAAI,KAAO,YADnB,uBAhBf,SAA4BvC,GAC1B,QAAIhE,EAAMoH,cAnIZ,SAA4BpD,GAE1B,OAA+C,IAA3CA,EAAMsC,WAAWe,QAAQ/F,EAAMF,MAIZ,KAAjB4C,EAAMuC,QACRvG,EAAMoG,mBAAmB9E,EAAMF,KAG1B,GA4HAkG,CAAmBtD,GActBuD,CAAmBvD,GAAS,KAAO,aARvC,UAUE,mBAAQlD,QA9Md,WACE4D,GAAYD,GACZrD,IAEA,IAAMoG,EAASC,KAAKC,MAAM1D,EAAMuC,OAAS,GACnCoB,EAAa3D,EAAM4D,MAAM,EAAGJ,GAC5BK,EAAc7D,EAAM4D,MAAMJ,EAAQxD,EAAMuC,QAErB,GAArBoB,EAAWpB,QAAesB,EAAYtB,OAAS,GACjDvG,EAAMkE,WAGRoB,EAASuC,GAETjD,EAAe,CACbsC,UAAWS,EACXR,WAAYU,IAGd7C,GAAa,IA2LT,sBAEF,yBAAMZ,KACN,mBACA,yBAAMC,OAKZ,WAAeyD,EAAAA,EAAAA,IAAW9G,I","sources":["components/StepsScroller.jsx","pages/Users/Levels/LevelTwo.js"],"sourcesContent":["import React from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\n\r\n// component for showing steps\r\nconst StepsScroller = (props) => {\r\n  const {\r\n    lineOne,\r\n    lineTwo,\r\n    lineThree,\r\n    handleReset,\r\n    handleNextStep,\r\n    handlePrevStep,\r\n    enablePrev,\r\n    enableReset,\r\n    enableNext,\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"steps-wrapper\">\r\n        {lineOne ? (\r\n          <div className=\"steps-header has-text-primary\">Steps:</div>\r\n        ) : (\r\n          <span></span>\r\n        )}\r\n\r\n        <div className=\"steps-list\">\r\n          {lineOne ? <li className=\"step1\">{lineOne}</li> : <span></span>}\r\n          {lineTwo ? <li className=\"step2\">{lineTwo}</li> : <span></span>}\r\n          {lineThree ? <li className=\"step3\">{lineThree}</li> : <span></span>}\r\n        </div>\r\n      </div>\r\n      {/* buttons */}\r\n      <Animated\r\n        animationIn=\"bounceInDown\"\r\n        animationOut=\"bounceOut\"\r\n        isVisible={true}\r\n      >\r\n        <div className=\"control-btns field has-addons\">\r\n          <div className=\"control\">\r\n            {enablePrev ? (\r\n              <button\r\n                className=\"button is-primary is-large p-5 is-outlined\"\r\n                onClick={handlePrevStep}\r\n              >\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fas fa-angle-left\"></i>\r\n                </span>\r\n                <span>Prev</span>\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"control\">\r\n            {enableReset ? (\r\n              <button\r\n                className=\"button is-primary is-large p-5 is-outlined\"\r\n                onClick={handleReset}\r\n              >\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fa fa-refresh\"></i>\r\n                </span>\r\n                <span>Reset</span>\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"control\">\r\n            {enableNext ? (\r\n              <button\r\n                className=\"button is-primary is-large p-5 is-outlined\"\r\n                onClick={handleNextStep}\r\n              >\r\n                <span>Next</span>\r\n                <span className=\"icon is-small\">\r\n                  <i className=\"fas fa-angle-right\"></i>\r\n                </span>\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </Animated>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StepsScroller;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport LevelHeader from \"components/LevelComponents/LevelHeader\";\r\nimport MergeSort from \"algorithms/mergeSort.mjs\";\r\nimport \"../../../css/LevelStyles.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport StepsScroller from \"components/StepsScroller\";\r\nimport { toast } from \"react-toastify\";\r\nimport RightSound from \"assets/audios/RightSound.mp3\";\r\nimport WrongSound from \"assets/audios/WrongSound.mp3\";\r\nimport CorrectAnswer from \"assets/audios/CorrectAnswer.mp3\";\r\n// modals\r\nimport StartModal from \"components/Modals/StartModal\";\r\nimport GameoverModal from \"components/Modals/GameoverModal\";\r\nimport EndModal from \"components/Modals/EndModal\";\r\n\r\ntoast.configure();\r\nclass LevelTwo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      initialArr: [],\r\n      splitting: true,\r\n      step: 0,\r\n      instructions: [],\r\n      // boxes: Array(11).fill(null),\r\n      // boxIndex: [1, 2, 4, 4, 5, 8, 9, 9, 5, 2, 3, 6, 6, 7, 10, 11, 11, 7, 3, 1],\r\n      order: [],\r\n      splitOrder: [],\r\n      win: false,\r\n\r\n      // ------ Modal States ----- //\r\n      showModal: true, //enable modal rendering\r\n      showStartModal: true, //show start level modal by default\r\n      showEndModal: false, //dont show endModal by default\r\n      showGameoverModal: false, //dont show gameover Modal by default\r\n\r\n      // ----- Game State ----- //\r\n      level: 2,\r\n      lives: 3,\r\n      time: 0,\r\n      lowerLimit: 1,\r\n      upperLimit: 20,\r\n      boxCount: 10,\r\n    };\r\n    this.generateArray = this.generateArray.bind(this);\r\n    this.handleNextStep = this.handleNextStep.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    this.handleMerge = this.handleMerge.bind(this);\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.handleEnd = this.handleEnd.bind(this);\r\n    this.handleGameover = this.handleGameover.bind(this);\r\n  }\r\n\r\n  //** Modal Related functions **/\r\n  // execute when start on the modal is pressed\r\n  handleStart() {\r\n    // generate new array\r\n    this.generateArray();\r\n    // hide start modal\r\n    this.setState({ showModal: false, showStartModal: false });\r\n    // start timer\r\n  }\r\n\r\n  // executes when the level ends\r\n  handleEnd() {\r\n    // show end modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: true,\r\n      showGameoverModal: false,\r\n    });\r\n  }\r\n\r\n  // executes when player life reaches 0\r\n  handleGameover() {\r\n    // end timer\r\n    // show gameover modal\r\n    this.setState({\r\n      showModal: true,\r\n      showEndModal: false,\r\n      showGameoverModal: true,\r\n    });\r\n    // save (username, time, remaining lives, completion date as logged data)\r\n  }\r\n\r\n  // render the appropriate modal based on current game state\r\n  renderModal() {\r\n    const StartModalBody = () => {\r\n      // modal content\r\n      return (\r\n        <div>\r\n          <li>\r\n            The steps of the algorithm are displayed in the text allowing the\r\n            user to move the numbers according to the current step.\r\n          </li>\r\n          <li>Navigate through the steps using the step player.</li>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    const GameoverModalBody = () => {\r\n      return (\r\n        <div>\r\n          <a href=\"/ms/level1\" className=\"dropdown-item\">\r\n            <span className=\"label has-text-centered\">\r\n              Start Level 1 <i className=\"fa-solid fa-play\"></i>\r\n            </span>\r\n          </a>\r\n        </div>\r\n      );\r\n    };\r\n    // if `showStartModal` state is true\r\n    if (this.state.showStartModal) {\r\n      return (\r\n        //show level start modal\r\n        <StartModal\r\n          handleStart={this.handleStart}\r\n          title={this.state.level}\r\n          body={<StartModalBody />}\r\n          lowerLimit={this.state.lowerLimit}\r\n          upperLimit={this.state.upperLimit}\r\n          boxCount={this.state.boxCount}\r\n        />\r\n      );\r\n      // if `showEndModal` state is true\r\n    } else if (this.state.showEndModal && !this.state.showGameoverModal) {\r\n      return (\r\n        <EndModal\r\n          title={this.state.level}\r\n          life={this.state.lives}\r\n          time={this.state.time}\r\n          next=\"Level 3\"\r\n        />\r\n      );\r\n    } else if (this.state.showGameoverModal && !this.state.showEndModal) {\r\n      return (\r\n        // show gameover modal\r\n        <GameoverModal\r\n          title={this.state.level}\r\n          time={this.state.time}\r\n          dropdownItems={<GameoverModalBody />}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  //creates array at the rendering of the class\r\n  generateArray() {\r\n    let currentOrd = [];\r\n    let currentInstr = [];\r\n    let splitOrd = [];\r\n    // Create array using given algorithm class\r\n    var sorting = new MergeSort(1, 20, 10);\r\n\r\n    sorting.sort(sorting.getArray(), currentOrd, splitOrd, currentInstr, false);\r\n    //retrieves array of instructions and order of steps\r\n    this.setState({\r\n      initialArr: sorting.getArray(),\r\n      order: currentOrd,\r\n      splitOrder: splitOrd,\r\n      instructions: currentInstr,\r\n    });\r\n  }\r\n\r\n  //sets order\r\n  setOrder(val) {\r\n    this.setState({ order: val });\r\n  }\r\n\r\n  //reset button handling\r\n  handleReset(e) {\r\n    // const box = Array(11).fill(null);\r\n    let step = 0;\r\n    this.setState({\r\n      step: step,\r\n      // boxes: box,\r\n      lineOne: null,\r\n      lineTwo: null,\r\n      lineThree: null,\r\n    });\r\n  }\r\n\r\n  //handles next step\r\n  handleNextStep(e) {\r\n    // const box = this.state.boxes.slice();\r\n    var step = this.state.step; //block order to retrieve\r\n    // const currentBox = this.state.boxIndex[step] - 1;\r\n    // box[currentBox] = this.state.order[step];\r\n\r\n    step++;\r\n    this.setState({\r\n      // boxes: box,\r\n      step: step,\r\n      lineOne: this.state.instructions[step - 1],\r\n      lineTwo: this.state.instructions[step],\r\n      lineThree: this.state.instructions[step + 1],\r\n    });\r\n  }\r\n\r\n  handleMerge() {\r\n    console.log(\"merge\");\r\n  }\r\n\r\n  handleSplit() {\r\n    console.log(\"split\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.showModal ? (\r\n          this.renderModal()\r\n        ) : (\r\n          <div>\r\n            <div className=\"header mb-6\">\r\n              <LevelHeader level=\"2\" />\r\n              {/* !!!!!modal testing */}\r\n              <div className=\"box is-pink\">\r\n                <h2>For Developer Only</h2>\r\n                <button\r\n                  className=\"button is-success is-outlined\"\r\n                  onClick={this.handleEnd}\r\n                >\r\n                  level complete\r\n                </button>\r\n                <button\r\n                  className=\"button is-danger is-outlined\"\r\n                  onClick={this.handleGameover}\r\n                >\r\n                  gameover\r\n                </button>\r\n              </div>\r\n              {/* !!!!!modal testing */}\r\n            </div>\r\n            <div>\r\n              <Arrays\r\n                array={this.state.initialArr}\r\n                label=\"initial\"\r\n                order={this.state.splitOrder}\r\n                nextStep={this.handleNextStep}\r\n              />\r\n            </div>\r\n            <div>\r\n              <StepsScroller\r\n                lineOne={this.state.lineOne}\r\n                lineTwo={this.state.lineTwo}\r\n                lineThree={this.state.lineThree}\r\n                enablePrev={false}\r\n                enableReset={false}\r\n                enableNext={false}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//This will keep track of what step the player is on through out the entire level.\r\nlet step = 0;\r\n\r\nfunction Arrays(props) {\r\n  //Get array and prep block values and children\r\n  let array = props.array;\r\n  let order = props.order;\r\n  let blockItems = [];\r\n  let children = [];\r\n\r\n  const [buttonEnabled, setButtonState] = useState(false);\r\n  const [isSplit, setIsSplit] = useState(false);\r\n  const [childArrays, setChildArrays] = useState();\r\n  const [mergedArray, setMergedArray] = useState(array === 1 ? [...array] : []);\r\n  const [isMerging, setIsMerging] = useState(false);\r\n  const [isMerged, setIsMerged] = useState(false);\r\n  const [winner, setWinner] = useState(false);\r\n  const [right, setRight] = useState();\r\n  const [steped, setSteped] = useState(false);\r\n\r\n  function pushToMerged(value) {\r\n    setMergedArray([...mergedArray, value]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    props.nextStep();\r\n  }, [array.length, array.length == mergedArray.length, array.length == 1]);\r\n\r\n  function handleSplit() {\r\n    setIsSplit(!isSplit);\r\n    step++;\r\n\r\n    const middle = Math.floor(array.length / 2);\r\n    const array_left = array.slice(0, middle);\r\n    const array_right = array.slice(middle, array.length);\r\n\r\n    if (array_left.length == 1 && array_right.length > 1) {\r\n      props.nextStep();\r\n    }\r\n\r\n    setRight(array_right);\r\n\r\n    setChildArrays({\r\n      leftArray: array_left,\r\n      rightArray: array_right,\r\n    });\r\n\r\n    setIsMerging(true);\r\n  }\r\n\r\n  function selectValue(el) {\r\n    let value = el.target.getAttribute(\"value\");\r\n    props.pushToMerge(value);\r\n    el.target.style.display = \"none\";\r\n  }\r\n\r\n  function SoundSuccess() {\r\n    new Audio(RightSound).play();\r\n  }\r\n\r\n  function SoundError() {\r\n    new Audio(WrongSound).play();\r\n  }\r\n\r\n  function CorrectAnswer() {\r\n    new Audio(CorrectAnswer).play();\r\n  }\r\n\r\n  //Called from checkSplitValidity, checks the rest of the arrays to enable Split.\r\n  function evaluateOtherSplit(condition) {\r\n    //Check if the child array on the right is now allowed to be split.\r\n    if (right.toString() === condition) {\r\n      //Set the override for the Split button, this will show the button regardless of the step.\r\n      setButtonState(true);\r\n    } else {\r\n      //If the condition is not met, check if a parent exists, and pass this function through again.\r\n      if (array.length !== 10) {\r\n        props.evaluateOtherSplit(condition);\r\n      }\r\n    }\r\n    //No need to return anything, either the screen is updated by the override, or there is no change required.\r\n  }\r\n\r\n  //Function to make sure user can only split one array at a time\r\n  function checkSplitValidity(array) {\r\n    //Check if the array in question is the next array in the given order.\r\n    if (array.toString().indexOf(order[step]) !== -1) {\r\n      return true;\r\n    } else {\r\n      //Check if a parent exists, if so, check if other arrays are next in the order.\r\n      if (array.length !== 10) {\r\n        props.evaluateOtherSplit(order[step]);\r\n      }\r\n      //If the next array in order is not found, return false and show no Split buttons.\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (isMerging) {\r\n    if (mergedArray != null) {\r\n      /*\r\n      let sorted = true;\r\n      console.log(mergedArray[mergedArray.length-2]);\r\n      console.log(mergedArray[mergedArray.length-1]);\r\n      if (mergedArray[mergedArray.length-1] > mergedArray[mergedArray.length-2]) {\r\n        sorted = false;\r\n        //if(!sorted){\r\n        //  console.log(\"bad\");\r\n          //console.log(mergedArray);\r\n          //}\r\n      }\r\n      */\r\n      let sorted = true; //array is sorted by default\r\n      for (let x = 0; x < mergedArray.length - 1; x++) {\r\n        //iterate through the array\r\n        if (parseInt(mergedArray[x]) > parseInt(mergedArray[x + 1])) {\r\n          //compares current and next value\r\n          sorted = false; //array no longer sorted\r\n          console.log(\"L\"); //debugging\r\n          console.log(mergedArray);\r\n          console.log(array);\r\n        }\r\n      }\r\n\r\n      if (!sorted) {\r\n        console.log(mergedArray);\r\n        console.log(\"bad\");\r\n        SoundError(); //bad sound\r\n        toast.error(\"INCORRECT\");\r\n      } else if (sorted) {\r\n        // CorrectAnswer();\r\n        SoundSuccess()\r\n        toast.success(\"CORRECT\");\r\n      }\r\n      for (let i = 0; i < mergedArray.length; i++) {\r\n        blockItems.push([\r\n          <button onClick={selectValue} value={mergedArray[i]}>\r\n            {mergedArray[i]}\r\n          </button>,\r\n        ]);\r\n      }\r\n    }\r\n\r\n    //merging is done if merged array length = original array length\r\n    if (mergedArray.length === 10) {\r\n      console.log(\"merging completed\");\r\n      setIsMerged(isMerged);\r\n      setIsMerging(!isMerging);\r\n      let sorted = true;\r\n      for (let x = 0; x < mergedArray.length - 1; x++) {\r\n        //goes through array\r\n        if (parseInt(mergedArray[x]) > parseInt(mergedArray[x + 1])) {\r\n          //checks if unsorted\r\n          sorted = false;\r\n        }\r\n      }\r\n      if (sorted) {\r\n        //if sorted\r\n        console.log(\"Winner\");\r\n        SoundSuccess(); //nice sound\r\n        toast.success(\"WINNER\");\r\n        setWinner(!winner);\r\n      } else if (!sorted) {\r\n        console.log(\"Loser\");\r\n        console.log(mergedArray);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!isMerging) {\r\n    //add current arrays items into blocked elements\r\n    for (let i = 0; i < array.length; i++) {\r\n      let temp = true;\r\n      if (array.length === 1) temp = false;\r\n      blockItems.push([\r\n        <button disabled={temp} onClick={selectValue} value={array[i]}>\r\n          {array[i]}\r\n        </button>,\r\n      ]);\r\n    }\r\n  }\r\n\r\n  if (!isMerged) {\r\n    if (childArrays !== undefined) {\r\n      children = (\r\n        <div className=\"split\">\r\n          <div className=\"left\">\r\n            <Arrays\r\n              array={childArrays.leftArray}\r\n              label=\"Left Array\"\r\n              order={order}\r\n              pushToMerge={pushToMerged}\r\n              evaluateOtherSplit={evaluateOtherSplit}\r\n              setButtonState={buttonEnabled}\r\n              nextStep={props.nextStep}\r\n            />\r\n          </div>\r\n          <div className=\"right\">\r\n            <Arrays\r\n              array={childArrays.rightArray}\r\n              label=\"Right Array\"\r\n              order={order}\r\n              pushToMerge={pushToMerged}\r\n              evaluateOtherSplit={evaluateOtherSplit}\r\n              parentButton={buttonEnabled}\r\n              nextStep={props.nextStep}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Allows for an override to let the Split button show no matter the evalutaion\r\n  function SplitButtonEnabler(array) {\r\n    if (props.parentButton) {\r\n      return true;\r\n    } else {\r\n      return checkSplitValidity(array);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"initial\">\r\n      <div\r\n        // null, shows the Split button, disappear hides the button\r\n        // isSplit checks if the button was pressed\r\n        // array.length > 1 checks if the array being displayed isnt a single number\r\n        // SplitButtonEnabler is a function that checks for the next valid place for the split button,\r\n        //     or if the override is enabled.\r\n        className={`${!isSplit ? null : \"disappear\"} + \r\n        ${array.length > 1 ? null : \"disappear\"} +\r\n        ${SplitButtonEnabler(array) ? null : \"disappear\"}`}\r\n      >\r\n        <button onClick={handleSplit}>Split</button>\r\n      </div>\r\n      <div>{blockItems}</div>\r\n      <br></br>\r\n      <div>{children}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(LevelTwo);\r\n"],"names":["props","lineOne","lineTwo","lineThree","handleReset","handleNextStep","handlePrevStep","enablePrev","enableReset","enableNext","className","animationIn","animationOut","isVisible","onClick","toast","LevelTwo","state","initialArr","splitting","step","instructions","order","splitOrder","win","showModal","showStartModal","showEndModal","showGameoverModal","level","lives","time","lowerLimit","upperLimit","boxCount","generateArray","bind","handleMerge","handleStart","handleEnd","handleGameover","this","setState","StartModalBody","GameoverModalBody","href","title","body","life","next","dropdownItems","currentOrd","currentInstr","splitOrd","sorting","MergeSort","sort","getArray","val","e","console","log","renderModal","Arrays","array","label","nextStep","React","blockItems","children","useState","buttonEnabled","setButtonState","isSplit","setIsSplit","childArrays","setChildArrays","mergedArray","setMergedArray","isMerging","setIsMerging","isMerged","setIsMerged","winner","setWinner","right","setRight","pushToMerged","value","selectValue","el","target","getAttribute","pushToMerge","style","display","SoundSuccess","Audio","RightSound","play","evaluateOtherSplit","condition","toString","length","useEffect","sorted","x","parseInt","WrongSound","i","push","temp","disabled","undefined","leftArray","rightArray","parentButton","indexOf","checkSplitValidity","SplitButtonEnabler","middle","Math","floor","array_left","slice","array_right","withRouter"],"sourceRoot":""}